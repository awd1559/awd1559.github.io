---
layout:     post
title:      "temp"
subtitle:   " \"uiSwitch \""
date:       2015-01-29 12:00:00
author:     "awd"
header-img: "img/post-bg-2015.jpg"
tags:
    - apple
---
UISwitch
//selector函数不存在，只报错，编译能通过
[[UISwitch alloc] initWithFrame:CGRectZero]
[switch setOn:YES]
[switch addTarget:self action:@selector(switchIsChanged:)	
	forControlEvents:UIControlEventValueChanged];
-(void)switchIsChanged:(UISwitch*)switch{}


switch.tintColor		off state color
switch.onTintColor		on state color
switch.thumbTintColor	knob color 

<UIPickerViewDataSource, UIPickerViewDelegate>
UIPickerView *picker = [[UIPickerView alloc] init];
picker.dataSource = self;
picker.delegate = self;

#pragma UIPickerViewDataSource
-(NSInteger) numberOfComponentsInPickerView:(UIPickerView*)picker;
-(NSInteger)pickerView:numberOfRowsInComponent:

<UIPickerViewDelegate>
-(NSString*)pickerView:titleForRow:forComponent:

UIDatePicker* picker = [[UIDatePicker alloc] init];
picker.datePickerMode = UIDatePickerModeDate;
NSDate *date = picker.date;

NSTimeInterval oneYearTime = 365 * 24 * 60 * 60;
NSDate *today = [NSDate date];
NSDate *oneYearLater = [today dateByAddingTimeInterval:oneYearTime];
NSDate *twoYearLater = [today dateByAddingTimeInterval:2*oneYearTime];
picker.minimumDate = oneYearLater;
picker.maximumDate = twoYearLater;

picker.datePickerMode = UIDatePickerModeCountDownTimer;
NSTimeInterval twoMinutes = 2 * 60;
[picker setCountDownDuration:twoMinutes];


UISlider *slider = [[UISlider alloc] initWithFrame:CGRectMake(0, 0, 200, 23);
slider.minimumValue = 0.0f;
slider.maximumValue = 100.0f;

[slider setMinimumValueImage]
[slider setMinimumTrackImage:forState];
[slider setThumbImage:forState:UIControlStateNormal];
[slider setThumbImage:forState:UIControlStateHighlighted];
[slider setMaximumTrackImage:forState];
[slider setMaximumValueImage];

slider.minimumTrackTintColor
slider.maximumTrackTintColor
slider.thumbTintColor


NSArray *segs;
UISegmentedControl *segment = [[UISegmentedControl alloc] initWithItems:segs];
segment.segmentedControlStyle = UISegmentedControlStyleBezeled;


//UIActivityViewController
UIActivityViewController *activity = 
[[UIActivityViewController alloc] initWithActivityItems:@[] applicationActivities:customActivity];
//弹出Share ViewController
[self presentViewController:activity animated:YES completion:^{};];

customActivity : UIActivity<UIActivityDelegate>{
	-(NSString*)activityType
	-(NSString*)activityTitle	
	-(UIImage*) activityImage	显示定制图片
}


//UINavigationController
UINavigationController nav = [[UINavigationController alloc] initWithRootViewController:viewController];

secondViewController *second = [secondViewController alloc] initWith
[nav pushViewController:second animated:YES];

-(void)goBack{
	[nav popViewControllerAnimated:YES];
}
[self performSelector:@selector(goBack) withObject:nil afterDelay:5.0f];

NSArray *currentControllers = self.navigationController.viewControllers;
MSMutableArray *newControllers = [NSMutableArray arrayWithArray:currentControllers];
[newControllers removeLastObject];
self.navigationController.viewControllers = newControllers;

self.navigatonItem.titleView = imageView;


//tab


//UITextField右侧显示¥符号
UILabel *left = [[UILabel alloc] initWithFrame:CGRectZero];
left.text = [[[NSNumberFormatter alloc] init] currencySymbo]; //$符号
textField.leftView = left;
textField.leftViewMode = UITextFieldViewModeAlways;



//UITextView多行显示


//UIButton
UIImage *normalImage = [UIImage imageNamed:@“NormalButton”];
UIImage *highlightedImage = [UIImage imageNamed:@“HighlightedButton”];
UIButton *button [UIButton buttonWithType:UIButtonTypeCustom];
[button setBackgroundImage:normalImage forState:];
[button setTitle:@“Normal” forState:UIControlStateNormal];
[button setBackgroundImage:highlightedImage forState;]
[button setTitle:@“Pressed” forState:UIControlStateHighlighted];

//UIImageView
UIImage *image = [UIImage imageNamed:@“”];
imageView.contentMode = UIViewContentModeScaleAspectFit;

//UIScrollView
UIScrollView scroll = [[UIScrollView alloc] initWithFrame:CGRectMake];
scroll.pagingEnabled = YES;
scroll.contentSize = CGSizeMake();
[scroll addSubView:];


//UIProgressView
UIProgressView progress = [[UIPorgressView alloc] initWithProgressViewStyle:UIProgressViewStyleBar];
progress.progress = 20.0f / 30.0f;



//animator
UIDynamicAnimator animator = [[UIDynamicAnimatior alloc] initWithReferenceView:self.view];
UIGravityBehavior *gravity = [[UIGravityBehavior alloc] initWithItems:@[myview]];			//赋予myviewgravity
[animator addBehavior:gravity];




//autolayout
button.translatesAutoresizingMaskIntoConstraints = NO;


NSLayoutConstraint *centerXCons = 
[NSLayoutConstraint constraintWithItem:button
                      attribute:NSLayoutAttributeCenterX
                      relatedBy:NSLayoutRelatioinEqual
                         toItem:button.superview
                      attribute:NSLayoutAttributeCenterX
                     multiplier:1.0f
                       constant:0.0f];
[self.view addConstraint:centerXCons];


//Visual Format Language
H:[button]-[textField]		标准间距
H:[button]—8-[textField]	水平间距8
H:[button(>=50)]		button.width >=50
H:|-50-[box]-50-|		距左边50，右边50；
V:[topField]-10-[buttonField]	垂直间距10

[maroonView][oceanView]		Flush Views
[button(100@20)]		Priority
[button1(==button2)]		Equal Widths
[flexButton(>=70, <=100)]

NSDictionary *views = NSDictionaryOfVariableBindings(v1, v2, v3);
NSArray *con = [NSLayoutConstraint constraintsWithVisualFormat:@“H||” optons:metrics:nil views:views];

[self.view addConstraints:cons];


//fonts
for(NSString*familyName in [UIFont familyNames])
	for(NSString *fontName in [UIFont fontNamesForFamilyName:familyName]

UIFont *font = [UIFont fontWithName:@“Thonburi-Bold” size:12.0f];
UIFont *font = [UIFont boldSystemFontOfSize:30];

[myString drawAtPoint:CGPointMake(40, 180) withAttributes:@{
	NSFontAttributeName : font}];

[mystring drawWithRect:CGRectMake(100, 120, 100, 200) options:attributes:@{NSFontAttributeName: font} context:nil];

UIImage *image = [UIImage imageNamed:@“xcode”];
[image drawAtPoint:CGPointMake(0.0f, 20.0f)];
[image drawInRect:CGRectMake(50.0f, 10.0f, 40.0f, 35.0f)];

UIEdgeInsets edges;
edges.left = 14.0f;
edges.top  = 0.0f;
edges.right = 14.0f;
edges.bottom = 0.0f;
UIImage *image =[UIImage imageNamed:@“Button”];
[image resizeableImageWithCapInsets:edges];

-(void)drawRect:(CGRect)rect{
	CGContextRef context = UIGraphicsGetCurrentContext();

	CGContextSetLineJoin(context, kCGLineJoinRound);
	CGContextSetShadowWithColor(context, CGSizeMake(10.0f, 10.0f), 20.0f, [[UIColor grayColor] CGColor]);
	CGContextSetLineWidth(context, 5.0f);

	CGContextMoveToPoint(context, 50.0f, 10.0f);

	CGContextAddLineToPoint(context, 100.0f, 200.0f);

	CGContextStrokePath(context);
}


//UITableView
UITableView *table = [[UITableView alloc] initWithFrame:self.view.bounds style:UITableViewStylePlain];
[table registerClass:[UITableViewCell class] forCellReuseIdentifier:TTT];
table.delegate = self;
table.dataSource = self;
table.autoresizingMask = UIViewAutoresizingFlexibleWidth | UIViewAutoresizingFlexibleHeight;


#pragam UITableViewDataSource
-(NSInteger) numberOfSectionsInTableView
-(NSInteger) table:numberOfRowsInSection:

-(UITableViewCell)tableView:cellForRowAtIndexPath
	UITableViewCell* cell = nil;
	cell = [tableView dequeueReusableCellWithIdentifier:TTT forIndexPath:;
	cell.textLabel.text
	result.accessoryType = UITableViewCellAccessoryDetailDisclosureButton;
	cell.accessoryView = myview;

-(NSString*)tableView:titleForHeaderInSection:
-(NSString*)tableView:titleForFooterInSection:


//for UIViewController editButtonItem
-(void)setEditing:animated:
	table setEditing:animated:
tableView:editintStyleForRowAtIndexPath:
	return UITableViewCellEditingStyleDelete;
tableView:commitEditingStyle:forRowAtIndexPath:
	if(editingStyle == UITableViewCellEditingStyleDelete)
	table deleteRowsAtIndexPaths:withRowAnimation:UITableViewRowAnimationLeft
	//and remove model data;
tableView:canEditRowAtIndexPath:
tableView:canMoveRowAtIndexPath:
tableView:moveRowAtIndexPath:toIndexPath:


#pragam UITableViewDelegate
//row高度
-(CGFloat) tableView:heightForRowAtIndexPath:

//header高度
-(CGFloat) tableView:heightForHeaderInSection:
-(UIView*) tableView:viewForHeaderInSection:

//footer高度
-(CGFloat) tableView:heightForFooterInSection:
-(UIView*) tableView:viewForFooterInSection:

//context menu
-(BOOL) tableView:shouldShowMenuForRowAtIndexPath:
//show copy menu
-(BOOL) tableView:canPerformAction
	if(action == @selector(copy:)return YES;
-(void) tableViw:performAction:forRowAtIndexPath:withSender
	if(action == @selector(copy:))
	UITableViewCell *cell = [table cellForRowAtIndexPath:];
	UIPasteboard *board = [UIPasteBoard generalPasteboard];
	[board setString:cell.textlabel.text];


//move
//move data first
[table moveSection:0 toSection:2]
[table moveRowAtIndexPath:source toIndexPath:dest];


UICollectionViewFlowLaout *layout = [[UICollectionViewFlowLayout alloc] init];
layout.minimumLineSpaceing = 20.0f;
layout.minimumInteritemSpacing = 20.0f;
layout.itemSize = CGSizeMake(80.0f, 120.0f);
layout.scrollDirection = UICollectionViewScrollDirectionVertical;
layout.sectionInset = UIEdgeInsetMake(10.0f, 20.0f, 10.0f, 20.0f);

ViewContrller* collection =  [[ViewController alloc] initWithCollectionViewLayout:layout];


ViewController : UICollectionView
-(instancetype) initWithCollectionViewLayout:
    self = [super initWithCollectionViewLayout:layout];
    if (self != nil){
        /* Register the cell with the collection view for easy retrieval */
        [self.collectionView registerClass:[UICollectionViewCell class]
                forCellWithReuseIdentifier:kCollectionViewCellIdentifier];

        /* or reusable nib file */
        UINib *nib = [UINib nibWithNibName:
                      NSStringFromClass([MyCollectionViewCell class])
                                    bundle:[NSBundle mainBundle]];
        [self.collectionView registerNib:nib
              forCellWithReuseIdentifier:kCollectionViewCellIdentifier];
    }
    return self;

-(NSInteger) collectionView:numberOfItemsInSection:
-(UICollectionViewCell*) collectionView:cellForItemAtIndexPath:
    UICollectionViewCell *cell = [collectionView dequeueReuseableCellWithReuseIdentifier:kCollectionViewCellIdentifier forIndexPath:indexPath];

//highlight时触发
- (void) collectionView:didHighlightItemAtIndexPath:
    UICollectionViewCell *selectedCell =
        [collectionView cellForItemAtIndexPath:indexPath];
    
    [UIView animateWithDuration:0.2f animations:^{
        selectedCell.transform = CGAffineTransformMakeScale(2.0f, 2.0f);
    }];

-(void) collectionView:didUnhighlightItemAtIndexPath:

-(void) collectionView:didSelectItemAtIndexPath:


//context menu
- (BOOL)collectionView:shouldShowMenuForItemAtIndexPath:
- (BOOL)collectionView:canPerformAction:forItemAtIndexPath:withSender
- (BOOL)collectionView:performActio:forItemAtIndexPath:withSender

//gesture
- (void) handlePinches:(UIPinchGestureRecognizer *)
    CGSize DefaultLayoutItemSize = CGSizeMake(80.0f, 120.0f);
    
    UICollectionViewFlowLayout *layout =
        (UICollectionViewFlowLayout *)self.collectionView.collectionViewLayout;
    
    layout.itemSize =
    CGSizeMake(DefaultLayoutItemSize.width * paramSender.scale,
               DefaultLayoutItemSize.height * paramSender.scale);
    
    [layout invalidateLayout];



//core data
.xcdatamodeld
//new
Person *newPerson = [NSEntityDescription
                         insertNewObjectForEntityForName:@"Person"
                         inManagedObjectContext:self.managedObjectContext];
NSError *savingError = nil;
[self.managedObjectContext save:&savingError]

//fetch
NSFetchRequest *fetchRequest = [[NSFetchRequest alloc]
                                    initWithEntityName:@"Person"];

//sort
NSSortDescriptor *ageSort = [[NSSortDescriptor alloc] initWithKey:@"age" ascending:YES];
NSSortDescriptor *firstNameSort = [[NSSortDescriptor alloc] initWithKey:@"firstName" ascending:YES];
fetchRequest.sortDescriptors = @[ageSorg, firstNameSort];

NSArray *persons =
    [self.managedObjectContext executeFetchRequest:fetchRequest
                                             error:&requestError];
if([persons count] > 0)
    for(Person *p in persons)



//delete
Person *p = [persons lastObject];
self.managedObjectContext deleteObject:p;
if([p isDeleted])


//binding
    <NSFetchedResultsControllerDelegate>
NSFetchedResultsController *frc =
    [[NSFetchedResultsController alloc]
     initWithFetchRequest:fetchRequest
     managedObjectContext:[self managedObjectContext]
     sectionNameKeyPath:nil
     cacheName:nil];
frc.delegate = self;

#pargram UITableViewDelegate
    id <NSFetchedResultsSectionInfo> sectionInfo =
        self.frc.sections[section];
    return sectionInfo.numberOfObjects;                //获取的数据数目


    Person *person = [frc objectAtIndexPath:indexPath];//获取一项数据


#pargram NSFetchedResultsControllerDelegate
-(void) controllerWillChangeContent:
-(void) controllerDidChangeContent:
-(void) controller:didChangeObject:atIndexPath:
     forChangeType:(NSFetchedRewaultsChangeType)type
      newIndexPath:


//relationship in models

//background fetch
NSManagedObjectContext *backgroundContext =
    [[NSManagedObjectContext alloc]
     initWithConcurrencyType:NSPrivateQueueConcurrencyType];
backgroundContext.persistentStoreCoorinator = self.persistentStoreCoordinator;
backgroundContext performBlock:^{
    NSError *error = nil;
    NSArray *personIds = [backgroundContext executeFetchRequest:[]]

    dispatch_async(dispatch_get_main_queue(). ^{});
}




//File I/O
NSFileManager *fileManager = [[NSFileManager alloc] init];
NSArray *urls = [fileManager URLsForDirectory:NSDocumentDirectory inDomains:NSUserDomainMask];
    NSDocumentDirectory
    NSCachesDirectory
    NSTemporaryDirectory

NSString *filePath = [NSTemporaryDirectory() stringByAppendingPathComponent:@"MyFile.txt"];
char bytes[4] = {'a', 'b', 'c', 'd'};
NSData *dataFromBytes = [[NSData alloc] initWithBytes:bytes
                                                   length:sizeof(bytes)];
if([dataFromBytes writeToFile:filePath atomically:YES])
    NSData *readData = [[NSData alloc] initWithContentsOfFile:filePath];




//network
NSString *urlAsString = @"http://www.apple.com";
NSURL *url = [NSURL URLWithString:urlAsString];
NSURLRequest *urlRequest = [NSURLRequest requestWithURL:url cachePolicy:NSURLRequestReloadIgnoringLocalAndRemoteCacheData timeoutInterval:30.0f];
NSOperationQueue *queue = [[NSOperationQueue alloc] init];
NSURLConnection sendAsynchronousRequest:urlRequest:queue:completionHandler:];

NSError *error = nil;
NSURLResponse *response = nil;
NSData *data = [NSURLConnection sendSynchronousRequest:urlRequest returningResponse:&response erro:&error];


dispatch_queue_t dispatchQueue = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0);
dispatch_async(dispatchQueue, ^(void){});





















//LocationManager
CLLocationManager *locationManager = [[CLLocationManager alloc] init];
[locationmanager setDistanceFilter:kCLDistanceFilterNone];
[locationManager setDesiredAccuracy:kCLLocationAccuracyBest];
[locationManager startUpdatingLocation];

#CLLocationManagerDelegate
- (void)locatioinManager:didUpdateToLocation:fromLocation
- (void)locationManager:didFailWithErro

-(void)locationManager:didUpdateHeading:

NSNotificationCenter *nc = [NSNotificationCenter defaultCenter];
[nc addObserver:self selector:@selector(:) name:object:nil];
当任意对象发布name消息时，self执行selector

[[NSNotificatinCenter defaultCenter] removeObserver:self]













//gcd
dispatch_async(dispatch_get_global_queue())
dispatch_async(dispatch_get_main_queue())
dispatch_once(dispatch_once_t )
dispatch_after(dispatch_time_t );
dispatch_group_async(dispatch_group_t )
dispatch_group_notify(dispatch_group_t )字符串格式化：
NSString *title = [sender titleForState:UIControlStateNormal];
    NSString *plainText = [NSString stringWithFormat:@"%@ button pressed.", title];
    NSMutableAttributedString *styledText = [[NSMutableAttributedString alloc]
                                             initWithString:plainText];
    NSDictionary *attributes =
    @{
      NSFontAttributeName : [UIFont boldSystemFontOfSize:_statusLabel.font.pointSize]
      };
    
    NSRange nameRange = [plainText rangeOfString:title];
    
    [styledText setAttributes:attributes range:nameRange];
    _statusLabel.attributedText = styledText;



tableview
使用tag获取storyboard中的view
UITableView *tableView = (id)[self.view viewWithTag:1];
还是使用IBoutlet




cell初始化
UITableViewCell *cell = [[UITableViewCell alloc] initWithStyle:UITableViewCellStyleDefault reuseIdentifier:@“Cell”];



UITableViewCell *cell
cell.textLabel.text = [NSString ];
cell.detailTextLaabel.text 
cell.imageViwe.image = [UIImage imageNamed:];
cell.imageView.highlightedImage








覆盖 UITableViewDelegate,   每个cell的向右偏移
-(NSInteger)tableView:(UITableViw*)tableView  indentationLevelForRowAtIndexPath:(NSIndexPath*) indexPath
{
	return ;
}





scrollView中contentView滚动的弹性区域
top = 20,使得tableView不和status bar 区域重叠
UIEdgeInsets contentInset = tableView.contentInset;
contentInset.top = 20;
[tableView setContentInset:contentInset];








//加入search
UISearchBar *searchBar = [[UISearchBar alloc]
                              initWithFrame:CGRectMake(0, 0, 320, 44)];
tableView.tableHeaderView = searchBar;
UISearchDisplayController *searchController = [[UISearchDisplayController alloc]
                        initWithSearchBar:searchBar
                        contentsController:self];
searchController.delegate = self;					//UISearchDisplayDelegate
searchController.searchResultsDataSource = self;



//搜索
#pragma mark Search Display Delegate Methods         //iOS8 使用UISearchControllerDelegate
- (void)searchDisplayController:(UISearchDisplayController *)controller
  didLoadSearchResultsTableView:(UITableView *)tableView
{
    [tableView registerClass:[UITableViewCell class]
      forCellReuseIdentifier:SectionsTableIdentifier];
}


- (BOOL)searchDisplayController:(UISearchDisplayController *)controller
shouldReloadTableForSearchString:(NSString *)searchString
{
    [filteredNames removeAllObjects];
    if (searchString.length > 0) {
        NSPredicate *predicate =
        [NSPredicate
         predicateWithBlock:^BOOL(NSString *name, NSDictionary *b) {
             NSRange range = [name rangeOfString:searchString
                                         options:NSCaseInsensitiveSearch];
             return range.location != NSNotFound;
         }];
        for (NSString *key in self.keys) {
            NSArray *matches = [self.names[key]
                                filteredArrayUsingPredicate: predicate];
            [filteredNames addObjectsFromArray:matches];
        }
    }
    return YES;
}


//搜索结果展示
- (NSArray *)sectionIndexTitlesForTableView:(UITableView *)tableView              //UITableView右侧的index 显示
{
    if (tableView.tag == 1) {
        return self.keys;
    } else {
        return nil;
    }
}

(NSString *)tableView:(UITableView *)tableView titleForHeaderInSection:(NSInteger)section
{
    if (tableView.tag == 1) {
        return self.keys[section];
    } else {
        return nil;
    }
}
- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath
{
	UITableViewCell *cell = [tableView dequ];
	if(tableView.tag == 1){
		cell.textLabel.text = 
	} else {
		cell.textLabel.text = filteredString[indexPath.row]
	}
	return cell;
}
//UITableView 右侧section index显示
tableView.sectionIndexBackgroundColor = 
tableView.sectionIndexTrackingBackgroundColor
tableView.sectionIndexColor

UserDefault
取出
NSUserDefaults *defaults = [NSUserDefaults standardUserDefaults];
        NSArray *storedFavorites = [defaults objectForKey:@"favorites"];
        if (storedFavorites) {
            self.favorites = [storedFavorites mutableCopy];
        } else {
            self.favorites = [NSMutableArray array];
        }


保存
NSUserDefaults *defaults = [NSUserDefaults standardUserDefaults];
[defaults setObject:self.favorites forKey:@"favorites"];
[defaults synchronize];
















