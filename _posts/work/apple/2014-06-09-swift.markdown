---
layout:     post
title:      "swift"
subtitle:   " \"swift, code tips\""
date:       2014-06-09 12:00:00
author:     "awd"
header-img: "img/post-bg-2015.jpg"
tags:
    - Apple
---


# UI

#### Label

```
let message = UILabel()

//AttributeText
let shadow = NSShadow()
shadow.shadowColor = UIColor.darkGray
shadow.shadowOffset = CGSize(width: 4, height: 4)

let attribute = [
    NSFontAttributeName: UIFont.boldSystemFont(ofSize: 60),
    NSForegroundColorAttributeName: UIColor.white,
    NSBackgroundColorAttributeName: UIColor.green,
    NSShadowAttributeName: shadow]

let result = NSMutableAttributedString(string: "message")
result.setAttributes(attribute, range: NSMakeRange(0, 3))
message.attributedText = result
```


||NSFontAttributeName||字体||
||NSParagraphStyleAttributeName||段落格式||
||NSForegroundColorAttributeName||字体颜色||
||NSBackgroundColorAttributeName||背景颜色||
||NSStrikethroughStyleAttributeName||删除线格式||
||NSUnderlineStyleAttributeName||下划线格式||
||NSStrokeColorAttributeName||删除线颜色||
||NSStrokeWidthAttributeName||删除线宽度||
||NSShadowAttributeName||阴影||


#### UITextView
```
let textView = UITextView(frame: view.bounds)
textView.text = "Some text goes here …"
textView.contentInset = UIEdgeInsets(top: 10, left: 0, bottom: 0, right: 0)
textView.font = UIFont.systemFont(ofSize: 16)
textView.delegate = self

//UIKeyboard
NotificationCenter.default.addObserver(self, selector: #selector(handleKeyboardDidShow(notification:)), name: .UIKeyboardDidShow, object: nil)
NotificationCenter.default.addObserver(self, selector: #selector(handleKeyboardWillHide(notification:)), name: .UIKeyboardWillHide, object: nil)



// MARK: UIKeyboard
let defaultContentInset = UIEdgeInsets(top: 10, left: 0, bottom: 0, right: 0)
func handleKeyboardDidShow(notification: NSNotification) -> Void {
    let keyboardRectAsObject = notification.userInfo![UIKeyboardFrameEndUserInfoKey] as! NSValue
    
    var keyboardRect = CGRect(x: 0, y: 0, width: 0, height: 0)
    keyboardRectAsObject.getValue(&keyboardRect)
    
    textView.contentInset = UIEdgeInsets(top: defaultContentInset.top, left: 0, bottom: keyboardRect.height, right: 0)
}

func handleKeyboardWillHide(notification: NSNotification) -> Void {
    textView.contentInset = defaultContentInset
}
```


#### UITextField
```
let textField = UITextField(frame: CGRect(x:0, y: 0,width: 200, height: 31))
textField.borderStyle = .RoundedRect
textField.contentVerticalAlignment = .Center
textField.textAlignment = .Center
textField.placeholder = "Enter your text here…."
textField.text = "Siri"
textField.delegate = self

//extension ViewController: UITextFieldDelegate {
  func textField(textField: UITextField, shouldChangeCharactersInRange range: NSRange, replacementString string: String) -> Bool {
    let range = Range(value.startIndex.advancedBy(8)..<value.startIndex.advancedBy(10))
    textField.text.replaceRange(range, with: string)
    return true
  }
  func textFieldShoudlReturn(textField: UITextField) -> Bool {
    return true
  }
}
```

> - UITextField右侧显示¥符号

```
//let left = UILabel()
//left.text = NumberFormatter().currencySymbol//$符号
//textField.leftView = left
//textField.leftViewMode = UITextFieldViewMode.Always
```


#### Textkit
```
NSTextStorage* textStorage = [[NSTextStorage alloc]  initWithString:@""];
NSLayoutManager* layoutManager = [[NSLayoutManager alloc] init];
[textStorage addLayoutManager:layoutManager];
NSTextContainer* textContainer = [[NSTextContainer alloc] initWithSize:rect.size];
[layoutManager addTextContainer:textContainer];

textView = [[UITextView alloc] initWithFrame:textViewRect textContainer:_textContainer];

[textView.textStorage beginEditing];
NSDictionary* attrsDic = @{NSTextEffectAttributeName:NSTextEffectLetterpressStyle};    //凸版效果
NSMutableAttributedString* attrStr = [[NSMutableAttributedString alloc] initWithString:@"" attributes:attrsDic];
[textStorage setAttributedString:attrStr];
[self markWord:@"我" inTextStorage:textStorage];
[textView.textStorage endEditing];



-(void) markWord:(NSString *)word inTextStorage:(NSTextStorage *)textStorage{
  NSRegularExpression *regex = [NSRegularExpression regularExpressionWithPattern:word options:0 error:nil];
  NSArray* matches = [regex matchesInString:_textView.text options:0 range:NSMakeRange(0, [_textView.text length])];

  for(NSTextCheckingResult* match in matches){
    NSRange matchRange = [match range];
    [textStorage addAttribute:NSBackgroundColorAttributeName value:[UIColor redColor] range:matchRange];
  }
}

//动态字体
self.textView.font = [UIFont preferredFontForTextStyle:UIFontTextStyleBody];
> - 这样设置之后，文本控件就会以用户设定的字体大小及粗细显示
> - 在系统字体修改时，系统会给运行中的程序发送UIContentSizeCategoryDidChangeNotification通知
[[NSNotificationCenter defaultCenter] addObserver:self 
  selector:@selector(preferredContentSizeChanged:) 
  name:UIContentSizeCategoryDidChangeNotification 
  object:nil]; 
```


#### UIImageView
```
let image = UIImage(named:"")
imageView.contentMode = .ScaleAspectFit
```


#### UIButton
```
let normalImage = UIImage(named: "normal")
let highlightedImage = UIImage(named: "high")

let button = UIButton(type: .system)
button.frame = CGRect(x: 100, y:100, width: 100, height: 100)
button.setTitle("xxxx", for: .normal)
button.setBackgroundImage(normalImage, for: .normal)
button.setBackgroundImage(highlightedImage, for: .highlighted)
button.addTarget(self, action: #selector(onTap(_:)),    for: .touchUpInside)
self.view.addSubview(button)

func onTap(_ sender: UIButton) {
}
```

#### Progress
```
//UIActivityIndicatorView
if self.myActivityIndicatorView.isAnimating {
  self.myActivityIndicatorView.stopAnimating
}else{
  self.myActivityIndicatorView.startAnimating
}

//UIProgressView
UIProgressView progress = [[UIPorgressView alloc] initWithProgressViewStyle:UIProgressViewStyleBar];
progress.progress = 20.0f / 30.0f;
myTimer = [NSTimer scheduledTimerWithTimeInterval:1.0
                                               target:self
                                             selector:@selector(download)
                                             userInfo:nil
                                              repeats:YES];
//每秒钟更新一次
-(void)download{
  self.myProgressView.progress=self.myProgressView.progress+0.1;
  if (self.myProgressView.progress==1.0) {
    [myTimer invalidate];
    UIAlertView*alert=[[UIAlertView  alloc]initWithTitle:@"download completed！"
                       message:@""
                       delegate:nil
                       cancelButtonTitle:@"OK"
                       otherButtonTitles: nil];
    [alert show];
  }
}
```

#### Alert

> - UIAlertView, Deprecated, use UIAlertController

> - UIActionSheet, Deprecated, use UIAlertController

> - UIAlertController

```
let controller = UIAlertController(title: "title", message: "message", preferredStyle: .ActionSheet)	//.Alert

// text field
controller.addTextFieldWithConfigurationHandler({(textField: UITextField) in
  textField.placeholder = "XXX-XXXX"
})

//action
let actionEmail = UIAlertAction(title: "email", style:.Default){[weak self] action in
  if let textFields = self!.controller?.textFields {
    let theTextFields = textFields as [UITextField]
    let userName = theTextFields[0].text
  }
}
controller.addAction(actionEmail)

self.presentViewController(controller, animated: true, completion: nil)
var label = UILabel(frame: CGRect(x:20, y: 100, width: 100, height: 23))
label.adjustsFontSizeToFitWidth = true
label.text = "iOS programming Cookbook"
label.font = UIFont.boldSystemFontOfSize(14)
```



#### UISwitch

```
var switch = UISwitch(frame: CGRect(x: 100, y: 100, width: 0, height: 0))
```

> - custom

```
switch.tintColor = UIColor.redColor()
switch.onTintColor = UIColor.brownColor()
switch.thumbTintColor = UIColor.greenColor()

switch.setOn(true, animated: true)
if switch.on {

}

switch.addTarget(self, action: "switchIsChanged:", forControlEvents: .ValueChanged)
func switchIsChanged(sender: UISwitch) {

}
```



#### UIPickerView

```
var picker = UIPickerView()
picker.dataSource = self		//UIPickerViewDataSource
picker.delegate = self			//UIPickerViewDelegate

UIPickerViewDataSource
  numberOfComponentsInPickerView(pickerView: UIPickerView) -> Int
  pickerView(UIPickerview, numberOfRowsInComponent ) -> Int
UIPickerViewDelegate
  pickerView(UIPickerView, titleForRow, forComponent) -> String
  pickerView:(UIPickerView *)pickerView didSelectRow:(NSInteger)row inComponent:(NSInteger)component {
    if (component == 0) {
      let seletedProvince = self.pickerProvincesData[row]
      let array = self.pickerData[seletedProvince]
      self.pickerCitiesData = array
      self.pickerView.reloadComponent(1)
    }
  }
```



##### UIDatePicker

```
var datePicker = UIDatePicker()
let today = NSDate()
let oneYearFromToday = today.dateByAddingTimeInterval(365*24*60*60)
let twoYearFromToday = today.dateByAddingTimeInterval(365*24*60*60*2)
datePicker.minimumDate = oneYearFromToday
datePicker.maximumDate = twoYearFromToday
datePicker.datePickerMode = .CountDownTimer
datePicker.countDownDuration = (2*60) as NSTimeInterval
```

```
let date = picker.date
```

#### UISlider

```
let slider = UISlider(frame: CGRect(x:0, y:0, width: 200, height:23))
slider.minimumValue = 0
slider.maximumValue = 100
slider.value = 50.0
```

```
slider.setThumbImage(normalImage, forState: .Normal)
slider.setThumbImage(highlightedImage, forState: .Highlighted)

slider.setMinimumTrackImage:forState
slider.setThumbImage:forState
slider.setThumbImage:forState
slider.setMaximumTrackImage:forState

slider.minimumValueImage
slider.maximumValueImage
slider.minimumTrackTintColor
slider.maximumTrackTintColor
slider.thumbTintColor
```

```
slider.addTarget(self, action:"sliderValueChanged:", forControlEvents: .ValueChanged)
func sliderValueChanged(slider: UISlider) {
  print("\(slider.value)")
}
```




#### UITableView

```
[self.tableView registerClass:[UITableViewCell class] forCellReuseIdentifier:@"Cell"];
```

> - tableview by code

```
class ViewController: UIViewController, UITableViewDataSource {
  override func viewDidLoad() {
    super.viewDidLoad()

    tableView = UITableView(frame: view.bounds, style: .Plain)    
    if let theTableView = tableView{
	  theTableView.registerClass(UITableViewCell.self, forCellReuseIdentifier: "Cell")
      theTableView.dataSource = self
      theTableView.autoresizingMask = .FlexibleWidth | .FlexibleHeight
      view.addSubview(theTableView)
    }
  }

  func numberOfSectionsInTableView(tableView: UITableView) -> Int {
    return 2
  }

  func tableView(tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
    return 3
  }

  func tableView(tableView: UITableView, cellForRowAtIndexPath indexPath: NSIndexPath) -> UITableViewCell {     
    var identifier = "Cell"
    let cell = tableView.dequeueReusableCellWithIdentifier(identifier, forIndexPath: indexPath) as! UITableViewCell
    cell.textLabel?.text = "section \(indexPath.section), Cell \(indexPath.row)"
    return cell
  }
}
```

> - 下拉刷新


```
UITableViewController
//初始化UIRefreshControl
UIRefreshControl *rc = [[UIRefreshControl alloc] init];
rc.attributedTitle = [[NSAttributedString alloc]initWithString:@"下拉刷新"];
[rc addTarget:self action:@selector(refreshTableView) forControlEvents:UIControlEventValueChanged];
self.refreshControl = rc;

-(void) refreshTableView
{
  if (self.refreshControl.refreshing) {
    self.refreshControl.attributedTitle = [[NSAttributedString alloc]initWithString:@"加载中..."];
    //添加新的模拟数据
    NSDate *date = [[NSDate alloc] init];
    //模拟请求完成之后，回调方法callBackMethod
    [self performSelector:@selector(callBackMethod:) withObject:date afterDelay:3];
  }
}
```


```
//这是一个模拟方法，请求完成之后，回调方法
-(void)callBackMethod:(id) obj
{
  [self.refreshControl endRefreshing];
  self.refreshControl.attributedTitle = [[NSAttributedString alloc]initWithString:@"下拉刷新"];
  [self.Logs addObject:(NSDate*)obj];

  [self.tableView reloadData];
}
```

> - 切换编辑模式

```
- (IBAction)toggleEditingMode:(id)sender {
  if (self.isEditing) {
    [sender setTitle:@"编辑" forState:UIControlStateNormal];

    [self setEditing:NO animated:YES];
  } else {
    [sender setTitle:@"完成" forState:UIControlStateNormal];

    [self setEditing:YES animated:YES];
  }
}
```

> - 表编辑－move

```
UITableViewDataSource
实现如下函数即可在编辑模式下移动UITableViewCell
- (void)   tableView:(UITableView *)tableView
  moveRowAtIndexPath:(NSIndexPath *)sourceIndexPath
         toIndexPath:(NSIndexPath *)destinationIndexPath
{
    Item *item = data[sourceIndex]
    //调换data中数据位置
}
```

> - 表编辑－删除

```
UITableViewDataSource
- (void)   tableView:(UITableView *)tableView
  commitEditingStyle:(UITableViewCellEditingStyle)editingStyle
   forRowAtIndexPath:(NSIndexPath *)indexPath
{
    // If the table view is asking to commit a delete command...
    if (editingStyle == UITableViewCellEditingStyleDelete) {
        [self.persons removeObjectAtIndex:indexPath.row];

        // Also remove that row from the table view with an animation
        [tableView deleteRowsAtIndexPaths:@[indexPath]
                         withRowAnimation:UITableViewRowAnimationFade];
    }
}
```

#### UICollectionView


```
#pragma mark - UICollectionViewDataSource
- (NSInteger)numberOfSectionsInCollectionView:(UICollectionView *)collectionView

- (NSInteger)collectionView:(UICollectionView *)collectionView numberOfItemsInSection:(NSInteger)section


- (UICollectionViewCell *)collectionView:(UICollectionView *)collectionView cellForItemAtIndexPath:(NSIndexPath *)indexPath
{
    Cell *cell = [collectionView dequeueReusableCellWithReuseIdentifier:@"Cell" forIndexPath:indexPath];
    NSDictionary *event = [self.events objectAtIndex:(indexPath.section*2 + indexPath.row)];
    cell.label.text = [event objectForKey:@"name"];
    cell.imageView.image = [UIImage imageNamed:[event objectForKey:@"image"]];
    return cell;
}

#pragma mark - UICollectionViewDelegate
- (void)collectionView:(UICollectionView *)collectionView didSelectItemAtIndexPath:(NSIndexPath *)indexPath
{
    NSDictionary *event = [self.events objectAtIndex:(indexPath.section*2 + indexPath.row)];
    NSLog(@"select event name : %@", [event objectForKey:@"name"]);

}
```

```
UICollectionViewFlowLayout *flowLayout = [UICollectionViewFlowLayout alloc] init;

self.myCollectionView = [UICollectionView alloc] initWithFrame:CGRectMake() collectionViewLayout:flowLayout
self.myCollectionView.backgroundColor = [UIColor];
self.myCollectionView registerClass: [UICollectionViewCell class] forCellWithReuseIdentifier:@""
self.myCollectionView.delegate = self;
self.myCollectionView.dataSource = self;

self.view addSubview:self.myCollectionView;
```

> - Layout决定CollectinView如何显示在界面上
> - FlowLayout是一个Cells的线性布局方案， 具有header & footer
> - 定制：
> - sizeForItemAtIndexPath
> - minimumInteritemSpacingForSectionAtIndex
> - referenceSizeForHeaderInSection
> - referenceSizeForFooterInSection
> - insetForSectionAtIndex

```
UICollectionViewDataSource
numberOfSectionsInCollectionView
numberOfItemsInSection
cellForItemAtIndexPath
viewForSupplementaryElementOfKind atIndexPath


UICollectionViewDelegate
```




#### UIWebView

```
  WebKit
  loadHTMLString:baseURL
  loadData:MIMEType:textEncodingName:baseURL

  NSString *htmlPath = [[NSBundle mainBundle] pathForResource: @"index" ofType:@"html"];
  NSURL *bundleUrl = [NSURL fileURLWithPath: [[NSBundle mainBundle] bundlePath]];
  NSError *erro = nil;

  NSString *html = [[NSString alloc] initWithContentsOfFile:htmlPath encoding: NSUTF8StringEncoding error:&error];
  if(error == nil) {
     [self webView loadHTMLString:html baseURL:bundleUrl];
  }

  webview.delegate


  UIWebViewDelegate
  #pragma mark — UIWebViewDelegate
  webview加载完成html之后调用,  webview访问加载的html中的js
  webview stringByEvaluatingJavaScriptFromString: //由webview执行这句javascript
  (void) webViewDidFinishLoad:(UIWebView*) webView{
   NSLog(@"%@", [webView stringByEvaluatingJavaScriptFromString: @"document.body.innerHTML"]);
  }

  html中js访问oc代码
  <button onclick='showDialog("JS to iOS 对象")'>调用iOS对象</button>
  function showAndroidDialog(msg) {
  	var myJSONObject = new Object();
  	myJSONObject.title = 'HelloWorld';
  	myJSONObject.message = msg;
  	var JSONString = JSON.stringify(myJSONObject);
  	var uri = 'gap://XXXClass.XXXmethod#' + JSONString;
  	window.location = uri;
  }
```


> - UIWebViewDelegate

```
  - (BOOL)webView:(UIWebView *)webView shouldStartLoadWithRequest:(NSURLRequest *)request navigationType:(UIWebViewNavigationType)navigationType
  {
      NSString *actionType = request.URL.host;
      NSString *scheme = request.URL.scheme;
      NSString *fragment = [request.URL.fragment URLDecodedString];
      NSData *responseData = [fragment dataUsingEncoding:NSUTF8StringEncoding];

      if ( [scheme isEqualToString:@"gap"] ) {
          if ([actionType isEqualToString:@"XXXClass.XXXmethod"]) {

              NSError* error;
              NSDictionary* json = [NSJSONSerialization
                                    JSONObjectWithData:responseData
                                    options:NSJSONReadingAllowFragments
                                    error:&error];

              NSLog(@"title: %@ , message: %@",[json objectForKey:@"title"], [json objectForKey:@"message"] );

          }
      }
      return true;
  }
```

#### Appearance


```
//UINavigationBar
UINavigationBar.appearance().titleTextAttributes = [NSForegroundColorAttributeName: UIColor.whiteColor()]
UINavigationBar.appearance().tintColor = UIColor.whiteColor()
UINavigationBar.appearance().barTintColor = UIColor.whiteColor()
		
//UITabBar
UITabBar.appearance().tintColor = UIColor.whiteColor()
let attributes = [NSForegroundColorAttributeName: UIColor.whiteColor()]
UITabBarItem.appearance().setTitleTextAttributes(attributes, forState:.Selected)
UITabBar.appearance().barTintColor = UIColor.whiteColor()

//UISearchBar
UISearchBar.appearance().tintColor = UIColor.whiteColor()

//UITextField
UITextField.appearanceWhenContainedInInstancesOfClasses([UISearchBar.self]).setCornerRadius(14.0)
UITextField.appearanceWhenContainedInInstancesOfClasses([UISearchBar.self]).alpha = 0.6
UITextField.appearance().tintColor = UIColor.whiteColor()

//UITextView    
UITextView.appearance().tintColor = UIColor.whiteColor()

//UIPageControl
UIPageControl.appearance().pageIndicatorTintColor = UIColor.whiteColor()
UIPageControl.appearance().currentPageIndicatorTintColor = UIColor.grayColor()
```

#### Storyboard/xib

```
let storyboard = UIStoryboard(name: "Main", bundle: nil)
let content = storyboard.instantiateViewControllerWithIdentifier("contentViewController")

let nib = UINib(nibName: "cell", bundle: nil)
```





















# Layout

#### root view

```
window = UIWindow(frame: UIScreen.main.bounds)
window?.rootViewController = navigation
window?.backgroundColor = UIColor.white
window?.makeKeyAndVisible()
```



#### Navigation

```
//screen top
let navigation = UINavigationController()
let first = FirstView()
let navigation = UINavigationController(rootViewController: first)

//in first
let second = SecondView()
navigationController?.pushViewController(second, animated: false)


//UINavigationBar: in one app only have one UINavigationBar
navigationController?.navigationBar.backgroundColor = UIColor.orange

//UINavigationItem: leftBarButtonItem, rightBarButtonItem
```


> - titleview

```
let imageView = UIImageView(frame: CGRect(x: 0, y: 0, width: 100, height: 40))
imageView.contentMode = .ScaleAspectFit
imageView.image = UIImage(named:"Logo")
navigationItem.titleView = imageView
```

> - BarButtonItem

```
//action function
func performAdd(sender: UIBarButtonItem) {
}

//title
navigationItem.rightBarButtonItem = UIBarButtonItem(title: "Add", style: .Plain, target: self, action: "performAdd:")

//systemItem
navigationItem.rightBarButtonItem = UIBarButtonItem(barButtonSystemItem: .Add, target: self, action: "performAdd:")

//custom view
let switch = UISwitch()
switch.on = true
navigationItem.rightBarButtonItem = UIBarButtonItem(customView: switch)
```

> - push viewController

```
self.navigationController.pushViewController(detailViewController, animated:true)
```








#### UIToolbar

```
//screen bottom
navigationController?.setToolbarHidden(false, animated: true)
let add = UIBarButtonItem(barButtonSystemItem: .add, target: nil, action: nil)
let save = UIBarButtonItem(barButtonSystemItem: .save, target: nil, action: nil)
let action = UIBarButtonItem(barButtonSystemItem: .action, target: nil, action: nil)
let search = UIBarButtonItem(barButtonSystemItem: .search, target: nil, action: nil)
let flexibleItem = UIBarButtonItem(barButtonSystemItem: .flexibleSpace, target: nil, action: nil)
toolbarItems = [add, flexibleItem, save, flexibleItem, action, flexibleItem, search]
```
















#### Tab

```
let first = FirstView()
first.tabBarItem.title = "first"
first.tabBarItem.image = 
let second = SecondView()
second.tabBarItem.title = "second"
second.tabBarItem.image = 

let tab = UITabBarController()
tab.viewControllers = [first, second]
```

























#### UISearchController



> - UISearchBar

```
let w = UIScreen.main.bounds.width
let searchBar = UISearchBar(frame: CGRect(x: 0, y: 0, width: w, height: 100))
searchBar.prompt = "选择"
searchBar.showsCancelButton = true
view.addSubview(searchBar)
```


```
class ResultsTableController: UITableViewController {}

class MainViewController : UITableViewController, UISearchResultsUpdating
  var searchController: UISearchController!
  var resultsTableController = ResultsTableController()

func viewDidLoad() {
  resultsTableController.tableView.dataSource = self
  searchController = UISearchController(searchResultsController:resultsTableController)
  searchController.searchResultsUpdater = self
  searchController.searchBar.sizeToFit()
  tableView.tableHeaderView = searchController.searchBar

  searchController.dimsBackgroundDuringPresentation = false
  searchController.hidesNavigationBarDuringPresentation = false
  let x = searchController.searchBar.frame.origin.x
  let y = searchController.searchBar.frame.origin.y
  let w = searchController.searchBar.frame.size.width
  searchController.searchBar.frame = CGRect(x: x, y: y, width: w, height: 44.0)
}

//MARK: UISerachResultsUpdating
func updateSearchResultsForSearchController(searchController: UISearchController) {
  if searchController.searchBar.text == nil || searchController.searchBar.text!.isEmpty{
    searchlist = data
    tableView.reloadData()
    return
  }
        
  let searchString = searchController.searchBar.text!
    if searchlist.count > 0 {
      searchlist.removeAll()
    }
  searchlist = data.filter{$0.containsString(searchString)}
  resultsTableController.filteredProducts = searchlist
  resultsTableController.tableView.reloadData()
}
```













#### UIPageControl



























#### UIScrollView

```
let scrollView = UIScrollView(frame: view.bounds)
scrollView.addSubview(imageView)
scrollView.contentSize = imageView.bounds.size

UIScrollViewDelegate
  scrollViewDidScroll
  scrollViewWillBeginDecelerating
  scrollViewDidEndDecelerating
  scrollViewDidEndDragging:willDecelerate:
```

> - page

```
scroll.pagingEnabled = true
scroll.contentSize = CGSize(width:Int, height:Int)
```

![scroll1](/img/in-post/work-apple-scroll1.png) ![scroll2](/img/in-post/work-apple-scroll2.png) ![scroll3](/img/in-post/work-apple-scroll3.png)

```
-(void) viewWillAppear:(BOOL)animated {
    //注册键盘出现通知
    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector (keyboardDidShow:) name: UIKeyboardDidShowNotification object:nil];
    //注册键盘隐藏通知
   [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector (keyboardDidHide:) name: UIKeyboardDidHideNotification object:nil];
   [super viewWillAppear:animated];
}
-(void) viewWillDisappear:(BOOL)animated {
    //解除键盘出现通知
    [[NSNotificationCenter defaultCenter] removeObserver:self  name: UIKeyboardDidShowNotification object:nil];
    //解除键盘隐藏通知
    [[NSNotificationCenter defaultCenter] removeObserver:self name: UIKeyboardDidHideNotification object:nil];
    [super viewWillDisappear:animated];
}
```

> - 回车取消键盘显示

```
#pragma mark — UITextFieldDelegate
- (BOOL)textFieldShouldReturn:(UITextField *)textField
{
    [textField resignFirstResponder];
    return YES;
}
```

```
CGRect screenRect = self.window.bounds;
UIScrollView *scrollView = [[UIScrollView alloc] initWithFrame:screenRect];
scrollView.pagingEnabled = YES;
[self.window addSubview:scrollView];
```
























#### UIPopoverController

```
ContentViewController *popoverViewController = [self.storyboard instantiateViewControllerWithIdentifier:@"SelectViewController"];
UINavigationController *nav = [[UINavigationController alloc] initWithRootViewController:popoverViewController];
UIPopoverController *pop = [[UIPopoverController alloc] initWithContentViewController:nav];
[pop presentPopoverFromBarButtonItem:sender permittedArrowDirections:UIPopoverArrowDirectionUp animated:YES];
```

#### UISegmentedController

```
var segmentedController = UISegmentedControl(items: ["iPhone", "iPad", "iPod"])

segmentedControl.addTarget(self, action: "segmentedControlValueChanged:", forControlEvents: .ValueChanged)

func segmentedControlValueChanged(sender: UISegmentedControl) {
  let index = sender.selectedSegmentIndex
  let title = sender.titleForSegmentAtindex(index)
}
```



















# System

#### Notification

```
NSNotificationCenter.defaultCenter().addObserver(self, selector:#selector(), name:"pushmessage", object:nil)
NSNotificationCenter.defaultCenter().postNotificationName("pushmessage", object:nil)

deinit {
  NSNotificationCenter.defaultCenter().removeObserver(self)
}
```

#### KVO
> - Key-Value-Coding
> - Key-Value-Observe

```
class DataModel: NSObject {
	var name:String = ""
	var price:Float	= 0.0
	init() {
		super.init()
		addObserver(self, forKeyPath:"price", options:[.New, .Old], context:nil)
		addObserver(self, forKeyPath:"name", options:[.New, .Old], context:nil)
	}
	
	//handler
	override func observeValueForKeyPath(keyPath: String?, ofObject object:AnyObject?, change:[String : AnyObject]?, context:UnsafeMutablePointer<Void>) {
	    if keyPath == "name" {
	        self.label.text = [self.data valueForKey:@"name"];
	    }
	}
	
	deinit {
		removeObserver(self, forKeyPath:"name")
		removeObserver(self, forKeyPath:"price")
	}
}
var data = DataModel()
data.setValue("tom", forKey:"name")
data.setValue("10.0", forKey:"price")

data.valueForKey("name")
```

#### Device version 

```
if Float(UIDevice.currentDevice().systemVersion) >= Float(8.0) {
  let types:UIUserNotificationType = [UIUserNotificationType.Sound, UIUserNotificationType.Badge, UIUserNotificationType.Alert]
  let notificationSettings = UIUserNotificationSettings(forTypes: types, categories:nil)
  UIApplication.sharedApplication().registerUserNotificationSettings(notificationSettings)
} else {
  let types:UIUserNotificationType = [.Badge, .Sound, .Alert]
  let application = UIApplication.sharedApplication()
            
  application.registerUserNotificationSettings(UIUserNotificationSettings(forTypes: types, categories:nil))
            
  UIApplication.sharedApplication().registerForRemoteNotifications()
}
```

#### 读取文件

```
NSBundle *bundle = [NSBundle mainBundle];
NSString *plistPath = [bundle pathForResource:@"events" ofType:@"plist"];
//获取属性列表文件中的全部数据
NSArray *array = [[NSArray alloc] initWithContentsOfFile:plistPath];
self.events = array;  
```

#### 添加Reminder

```
NSDate *date = self.datePicker.date;
UILocalNotification *note = [[UILocalNotification alloc] init];
note.alertBody = @"Hypnotize me!";
note.fireDate = date;

[[UIApplication sharedApplication] scheduleLocalNotification:note];
```

#### 随机数

```
int x = arc4random() % 100;			[0,100)包括0，不包括100
int y = (arc4random() % 501) + 500;		[500,1000]，包括500，包括1000


-(int)getRandomNumber:(int)from to:(int)to
{
    return (int)(from + (arc4random() % (to – from + 1)));
}
```


#### Resources
> - new->Resources->Settings.bundle
> - 系统Setting里就多一项

```
NSUserDefaults* defaults = [NSUserDefaults standardUserDefaults];
[defaults stringForKey:@""];
if([defaults boolForKey"@""]){}
```

#### 反射

```
Class viewControllerKlass = NSClassFromString(@"xxxxViewController");
NSAssert(viewControllerKlass, @"Class should not be nil!");
NSAssert([viewControllerKlass isSubclassOfClass:[UIViewController class]], @"Class should be a view controller!");
UIViewController *demoViewController = [[viewControllerKlass alloc] initWithNibName:nil bundle:nil];
```

#### App's LifeCycle
> - not running:  没有运行或者被系统终止   
> - Inactive:     正在进入前台，不能接收事件
> - Active:       能接收事件
> - Background:   后台，依然可执行代码，如果可执行代码结束，进入挂起
> - Suspended:    不能执行代码，如果内存不够，会被终止



# Hardware

####  Touch
> - 覆盖UIResponder的touchesBegan等方法就可以接受touch

```
- (void)touchesBegan:(NSSet *)touches withEvent:(UIEvent *)event
{
    NSLog(@"Touch began on %@", self);

    // Get 3 random numbers between 0 and 1
    float red = (arc4random() % 100) / 100.0;
    float green = (arc4random() % 100) / 100.0;
    float blue = (arc4random() % 100) / 100.0;

    UIColor *randomColor = [UIColor colorWithRed:red green:green blue:blue alpha:1.0];
    self.circleColor = randomColor;
}
```

#### Gesture

```
UITapGestureRecognizer *doubleTapRecognizer = [[UITapGestureRecognizer alloc]  initWithTarget:self  action:@selector(doubleTap:)];
doubleTapRecognizer.numberOfTapsRequired = 2;
doubleTapRecognizer.delaysTouchesBegan = YES;
[myUIView addGestureRecognizer:doubleTapRecognizer];
```

or

```
UIPanGestureRecognizer *moveRecognizer；
self.moveRecognizer = [[UIPanGestureRecognizer alloc] initWithTarget:self action:@selector(moveLine:)];
self.moveRecognizer.delegate = self;
self.moveRecognizer.cancelsTouchesInView = NO;
[self addGestureRecognizer:self.moveRecognizer];
```

> - UIGestureRecognizerDelegate

```
- (BOOL)gestureRecognizer:(UIGestureRecognizer *)gestureRecognizer
    shouldRecognizeSimultaneouslyWithGestureRecognizer:(UIGestureRecognizer *)other
{
    if (gestureRecognizer == self.moveRecognizer) {
        return YES;
    }
    return NO;
}
```

#### Camera

```
let imagePicker = UIImagePickerController()
imagePicker.modalPresentationStyle = UIModalPresentationCurrentContext

if UIImagePickerController.isSourceTypeAvailable(.Camera) {
  imagePicker.sourceType = .Camera
} else {
  imagePicker.sourceType = .Library
}
imagePicker.delegate = self

self.presentViewController(imagePicker, animated:true, completion:nil)
```

> - UIImagePickerControllerDelegate

```
override func imagePickerController(picker: UIImagePickerController, didFinishPickingMediaWithInfo info:[String:AnyObject]) {
  let image = info[UIImagePickerControllerOriginalImage]
  self.imageView.image = image
  self.dismissViewControllerAnimated(true, completion:nil)
}
override func imagePickerControllerDidCancel(picker: UIImagePickerController) {
  self dismissViewControllerAnimated(true, completion:nnil)
}
```





## CoreData





## NetWork






## Animations

```
animation CABasicAnimation(keyPath: "path")
animation.fromValue = startPath
animation.toValue = endPath
```

```
//开始动画
[UIView beginAnimations:@"doflip" context:nil]
//动画时长
[UIView setAnimationDuration:1]
//动画curve
[UIView setAnimationCurve:UIViewAnimationCurveEaseInOut]
//代理
[UIView setAnimationDelegate:self]
//翻转方向
[UIView setAnimationTransition:
 UIViewAnimationTransitionFlipFromLeft  forView:myImageView cache:YES ]
[UIView commitAnimations]

View.animateWithDuration
```
















# AutoLayout

#### better use SnapKit

```
yellowView.snp.makeConstraints { make in
    make.left.equalTo(self.view).offset(20)
    make.top.equalTo(self.view).offset(20)
    make.width.height.equalTo(100)
}

redView.snp.makeConstraints { make in
    make.left.equalTo(yellowView.snp.right).offset(80)
    make.top.equalTo(yellowView.snp.top)
    make.height.width.equalTo(yellowView)
}
```


#### LayoutGuide 
> - since iOS9
> - a placehoder view
> - UILaoutGuide/NSLayoutGuide


#### NSLayoutAnchor

```
orangeView.translatesAutoresizingMaskIntoConstraints = false
orangeView.topAnchor.constraint(equalTo: yellowView.bottomAnchor).isActive = true
orangeView.leftAnchor.constraint(equalTo: yellowView.leftAnchor).isActive = true
orangeView.widthAnchor.constraint(equalTo: yellowView.widthAnchor, multiplier: 1, constant: 0).isActive = true
orangeView.heightAnchor.constraint(equalTo: yellowView.heightAnchor, multiplier: 1, constant: 0).isActive = true

greenView.translatesAutoresizingMaskIntoConstraints = false
greenView.topAnchor.constraint(equalTo: orangeView.topAnchor).isActive = true
greenView.leftAnchor.constraint(equalTo: orangeView.rightAnchor, constant: 80).isActive = true
greenView.heightAnchor.constraint(equalTo: orangeView.heightAnchor).isActive = true
greenView.widthAnchor.constraint(equalTo: orangeView.widthAnchor).isActive = true
```


#### addConstraints

```
// [0]
view.translatesAutoresizingMaskIntoConstraints = false


// [1] prepare views
let headerView = UIView()
let avatar = UIImageView()
let nameLabel = UILabel()
headerView.addSubview(avatar)
headerView.addSubview(nameLabel)
let views = ["avatar":avatar, "nameLabel":nameLabel]


// [2] add constraints with VFL
// avatar.height = 60
headerView.addConstraints(NSLayoutConstraint.constraintsWithVisualFormat(
    "V:[avatar(60)]-10-[nameLabel]-15-|",
    options:.AlignAllCenterX,
    metrics:nil,
    views:views))


// [3] use matrics param
let metrics = ["x": UIScreen.mainScreen().bounds.size.width / 4 - 15]

//avatar's left offset screen.s left: 1/4 width - 15, avatar.width = 60
headerView.addConstraints(NSLayoutConstraint.constraintsWithVisualFormat(
    "|-x-[avatar(60)]",
    options:[],
    metrics:metrics,
    views:views))






// add constraints with NSLayoutAttribute
//logo.centerx = view.centerx * 1 + 0

self.view.addConstraint(NSLayoutConstraint(item:logo,      
    attribute:NSLayoutAttribute.CenterX,
    relatedBy:NSLayoutRelation.Equal,
    toItem:self.view,
    attribute:NSLayoutAttribute.CenterX,
    multiplier:1.0,
    constant:0))
```

#### Visual Format Language

```
H:[button]-[textField]    标准间距
H:[button]—8-[textField]  水平间距8
H:[button(>=50)]    button.width >=50
H:|-50-[box]-50-|   距左边50，右边50；
V:[topField]-10-[buttonField] 垂直间距10

[maroonView][oceanView]   Flush Views
[button(100@20)]    Priority
[button1(==button2)]    Equal Widths
[flexButton(>=70, <=100)]
```































# Objective-C to Swift

```
enumerateObjectsUsingBlock

for (index, value) in array.enumerate() {
    static var stop = false
    if stop {
	break
   }
   //your code
}


extension Array{
    func enumerateObjectsUsingBlock(enumerator:(obj:Any, idx:Int, inout stop:Bool)->Void){
        for (i,v) in self.enumerate(){
            var stop:Bool = false
            enumerator(obj: v, idx: i,  stop: &stop)
            if stop{
                break
            }
        }
    }
}

[1,2,3,4,5].enumerateObjectsUsingBlock(){obj, idx, stop in
}



NSArray->reverseObjectEnumerator
Array.reverse

replaceCharactersInRange(NSRange, withString: NSString)
String.stringByReplacingCharactersInRange(Range, withString:NSString)



CoreGraphics
kCGInterpolationNone
  CGInterpolationQuality.None
```


