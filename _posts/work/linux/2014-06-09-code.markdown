---
layout:     post
title:      "linux programming"
subtitle:   " \"all about linux programming\""
date:       2014-06-09 12:00:00
author:     "awd"
header-img: "img/post-bg-2015.jpg"
category: linux
permalink: /linux/code
tags:
    - linux
---
> - [linux目录](/linux/)


# code

#### stat


```
/*
struct stat {
	mode_t 	st_mode;	//file type & mode(permissions)
	ino_t	st_ino;		//inode number
	dev_t	st_dev;		//device number
	dev_t	st_rdev;	//device number for special files
	nlink_t	st_nlink;	//number of links
	uid_t	st_uid;		//user id for owner
	gid_t	st_gid;		//group id for owner
	off_t	st_size;	//size in bytes, for regular files
	time_t	st_atimve;	//time of last access
	time_t 	st_mtime;	//time of last modification
	time_t	st_ctime;	//time of last file status change
	long	st_blksize;	//best IO block size
	long	st_blocks;	//number of 512-byte blocks allocated
}

stat.st_mode

文件类型标志包括：
S_IFBLK：文件是一个特殊的块设备
S_IFDIR：文件是一个目录
S_IFCHR：文件是一个特殊的字符设备
S_IFIFO：文件是一个FIFO设备
S_IFREG：文件是一个普通文件（REG即使regular啦）
S_IFLNK：文件是一个符号链接

其他模式标志包括：
S_ISUID：文件设置了SUID位
S_ISGID：文件设置了SGID位
S_ISVTX：文件设置了sticky位

用于解释st_mode标志的掩码包括：
S_IFMT：文件类型
S_IRWXU：属主的读/写/执行权限，可以分成S_IXUSR, S_IRUSR, S_IWUSR
S_IRWXG：属组的读/写/执行权限，可以分成S_IXGRP, S_IRGRP, S_IWGRP
S_IRWXO：其他用户的读/写/执行权限，可以分为S_IXOTH, S_IROTH, S_IWOTH

还有一些用于帮助确定文件类型的宏定义，这些和上面的宏不一样，这些是带有参数的宏，类似与函数的使用方法：
S_ISBLK：测试是否是特殊的块设备文件
S_ISCHR：测试是否是特殊的字符设备文件
S_ISDIR：测试是否是目录（我估计find . -type d的源代码实现中就用到了这个宏）
S_ISFIFO：测试是否是FIFO设备
S_ISREG：测试是否是普通文件
S_ISLNK：测试是否是符号链接
S_ISSOCK：测试是否是socket 
*/


#include <sys/types.h>
#include <sys/stat.h>

int stat(const char* pathname, struct stat* buf);
int fstat(int filedes, struct stat* buf);
int lstat(const char* pathname, struct stat* buf);


struct stat buf;
stat("test.c", &buf);
printf("test.c file size = %lld\n", buf.st_size);
printf("is dir: %s\n", S_ISDIR(buf.st_mode) ? "true" : "false");

```




#### access



```
/*
当前用户是否对pathname有mode权限
mode
	R_OK	//读许可权
	W_OK	//写许可权
	X_OK	//执行许可权
	F_OK	//文件是否存在
*/

#include <unistd.h>
int access(const char* pathname, int mode);	//成功返回0

```


#### umask

```
/*
cmask
	S_IRUSR		//用户-读
	S_IWUSR		//用户-写
	S_IXUSR		//用户-执行
	S_IRGRP		//组-读
	S_IWGRP		//组-写
	S_IXGRP		//组-执行
	S_IROTH		//其他-读
	S_IWOTH		//其他-写
	S_IXOTH		//其他-执行
*/

#include <sys/types.h>
#include <sys/stat.h>

mode_t umask(mode_t cmask);	//返回旧屏蔽字，将cmask中指定的权限从后续的文件操作中去掉
```


#### chmod

```
/*
mode
	S_ISUID
	S_ISGID
	S_ISVTX
	S_IRWXU	= S_IRUSR S_IWUSR S_IXUSR
	S_IRWXG = S_IRGRP S_IWGRP S_IXGRP
	S_IRWXO = S_IROTH S_IWOTH S_IXOTH
*/

#include <sys/types.h>
#include <sys/stat.h>

int chmode(const char* pathname, mode_t mode);
int fchmod(int filedes, mode_t mode);
```


#### owner 

```

#include <sys/types.h>
#include <unistd.h>

int chown(const char* pathname, uid_t owner, gid_t group);
int fchown(int filedes, uid_t owner, gid_t group);
int lchown(const char* pathname, uid_t owner, gid_t group);
```


#### turncate

```
#include <sys/types.h>
#include <unistd.h>

int turncate(const char* pathname, off_t length);
int fturncate(int filedes, off_t length);
```



#### link, rename 

```
#inlcude <unistd.h>
int link(const char* existingpath, const char* newpath);

#include <unistd.h>
int unlink(const char* pathname);		//删除一个现存的目录项

#include <stdio.h>
int remove(const char* pathname);		//对文件与unlink函数相同，对于目录与rmdir函数相同

#include <stdio.h>
int rename(const char* oldname, const char* newname);



#include <unistd.h>
int symlink(const char* acutualpath, const char* sympath);	//创建链接
int readlink(const char* pathname, char buf, int bufsize);	//组合了open，read，close
```


#### time

```
#include <sys/types.h>
#include <utime.h>
int utime(const char* pathname, const struct utimebuf times);	//文件的存取/修改时间
```


#### open

```
/*
oflag
	O_RDONLY	0	只读
	O_WRONLY	1	只写
	O_RDWR		2	读写
	O_APPEND		写到文件尾
	O_CREAT			若不存在则创建，需要创建mods
	O_EXCL			同时指定O_CREAT， 文件存在则出错，文件不存在则创建
	O_TRUNC			若文件存在，且只读或只写打开，则文件长度截短为0
	O_NOCTTY		若打开终端设备，则不将此设备分配为此进程的控制终端
	O_NONBLOCK		若打开FIFO、块文件、字符文件，为此文件的本次打开操作和后续的IO操作设置非阻塞方式
	O_SYNC			每次write都等到物理IO完成才返回，同步
*/

#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>
int open(const char* pathname, int oflag, .../*, mode_t mods */);	//返回文件描述符
```

#### create

```
#include <sys/types.h>
#include <sys/stat.h>
#icnlude <fcntl.h>

int creat(const char* pathname, mode_t mode);		//返回文件描述符
open(pathname, O_WRONLY|O_CREAT|O_TRUNC, mode);		//等价于
```


#### close

```
#include <unistd.h>
int close(int filedes);		//成功:0, 出错:-1
```


#### seek

```
#include <sys/types.h>
#include <unistd.h>

off_t lseek(int filedes, off_t offset, int whence);		//如果文件为管道文件或FIFO，返回-1
//whence
//SEEK_SET	设置文件当前位置为 文件开始+offset，offset取正值
//SEEK_CUR	设置文件当前位置为 当前位置+offset，offset取正负值
//SEEK_END	设置文件当前位置为 文件长度+offset，offset取正负值

off_t currpos = lseek(fd, 0, SEEK_CUR);		//获取文件当前位置
//如果文件为管道文件或FIFO，返回-1
//lseek不引起文件IO
//文件位移可以大于文件长度，对该文件的下一次写将延长文件，并留下空洞
```

#### read, write

```
#include <unistd.h>
ssize_t read(int filedes, void *buff,  size_t nbytes);		//返回读到的字节数，0为文件尾

//从终端设备读时，一次最多读一行
//从网络读时，最多读取缓冲中的字符数

#include <unistd.h>
ssize_t write(int filedes, const void* buff, size_t nbytes);	//返回已写的字节数
```


#### dup

```
#include <unistd.h>
int dup(int filedes);	//返回当前最小的可用文件描述符
			//等效于fcntl(filedes, F_DUPFD, 0);
int dup2(int filedes, int filedes2);		//已filedes2指定新描述符的数值, 如果filedes2已经打开，先将其关闭
			//等效于close(filedes2); fcntl(filedes, F_DUPFD, filedes2);
```


#### fcntl

```
/*
cmd
	F_DUPFD		//复制现存的描述符， 		返回新文件描述符
	F_GETFD		//获得/设置文件描述符标志	返回文件描述符标志
	F_SETFD		
	F_GETFL		//获得/设置文件状态标志		
	F_SETFL		
	F_GETOWN	//获得/设置异步I/O有权
	F_SETOWN
	F_GETLK		//获得/设置记录锁
	F_SETLK
	F_SETLKW
	

	F_GETFL/F_SETFL
	文件状态标志位
	O_RDONLY	//只读打开
	O_WRONLY	//只写打开
	O_RDWR		//读写打开,	这三个的掩码为O_ACCMODE
	O_APPEND	//写时添加至文件尾
	O_NONBLOCK	//非阻塞方式
	O_YNC		//等待写完成
	O_ASYNC		//异步IO
*/

#include <sys/types.h>
#include <unistd.h>
#include <fcntl.h>

int fcntl(int filedes, int cmd, ... /* int arg */);	
```


#### ioctl

```
#include <unistd.h>
#include <sys/ioctl.h>

int ioctl(int filedes, int request, ...);	
```




#### signal

```
int sigemptyset(sigset_t *set); //创建set并且情况信号集
int sigfillset(sigset_t *set); //创建set并使set包含所有linux的信号
int addset(sigset_t *set,int signo);      //给set信号集增加一个signo信号
int sigdelset(sigset_t*set,int signo); //将set信号集中的signo定义的信号剔除

以上四个函数成功调用返回0,失败返回1

int sigismember(const sigset_t *set,int signo); //判断set信号集中是否已经包含signo所指向的信号,真返回1,假返回0
int sigprocmask(int how,const sigset_t *set,sigset_t *oset);    //设置信号集的屏蔽位,如果oset不为NULL,则oset返回当前修改之前的屏蔽字
how的参数定义
SIG_BLOCK : 屏蔽set所包含的所有信号
SIG_UNBLOCK : 解除set所包含的所有信号
SIG_SETMASK : 直接设置屏蔽信号所指向的值给set信号集

int sigaction(int signo,const struct sigction *act,struct sigaction *oact);
sigaction函数的功能是检测或者修改signo信号关联的处理动作
signo是要检测或者修改具体动作的信号编号数,若act非NULL,则修改它的动作,如果oact非NULL,则返回该信号的原先动作
struct sigaction{
void (*sa_handler)(int signo); //用户自定义处理函数,或者SIG_DFL或者 SIG_IGN
sigset_t sa_mask;       //信号集,用来指导在信号处理指向过程中哪些信号要被阻塞
int sa_flags;   //信号选项,包括是否则色,是否忽略SIGSTOP,SIGSTP,SIGTTIN,SIGTTOU信号,是否自定义信号只执行一次等等
void (*as_restore);       
}

int sigpending(sigset_t *set); //用于检测set信号集中是否为未决的信号,比如在信号集阻塞时的信号


sa_restorer已过时，POSIX不支持它，不应再使用。

当你的信号需要接收附加信息的时候，你必须给sa_sigaction赋信号处理函数指针，同时还要给sa_flags赋SA_SIGINFO, 如下：

              sigemptyset(&sig_act.sa_mask);
              sig_act.sa_sigaction=sig_handler_with_arg;
              sig_act.sa_flags=SA_SIGINFO;
如果你的应用程序只需要接收信号，而不需要接收额外信息，那你需要的设置的是sa_handler,而不是sa_sigaction，如下：
              sigemptyset(&sig_act.sa_mask);
              sig_act.sa_handler=sig_handler;
              sig_act.sa_flags=0;


新版本
信号发送函数sigqueue()及信号安装函数sigaction()


信号值位于SIGRTMIN和SIGRTMAX之间的信号都是可靠信号，可靠信号克服了信号可能丢失的问题。
这些信号支持排队，不会丢失。 

信号阻塞：当信号发生而无法处理的时候，不要忽略该信号，在进程准备好时再通知它
信号产生到在进程上标记标志之间，信号未决(pending)

三个函数改变信号屏蔽字
sigpending将制定的哦信号设置为阻塞和pending
sigprocmask查询和设置当前进程的信号屏蔽字
sigsuspend在原子操作中实现恢复信号屏蔽字,并且使进程睡眠
```


#### error

```
//<errno.h>中定义了变量errno

#include <string.h>
char* strerrno(int errno);		//指向消息字符串的指针

#include <stdio.h>
void perror(const char* msg)	//输出以msg开头的错误信息，错误信息定义来自errno



目录的读权限：对目录进行搜索的能力
目录的写权限：在目录中创建和删除文件的能力
目录的执行权限：打开或访问目录中包含的文件或子目录时搜索目录的能力

粘着位sticky bit:t
如果文件设置了粘着位，那么只有文件的数组或root才可以删除该文件
```

