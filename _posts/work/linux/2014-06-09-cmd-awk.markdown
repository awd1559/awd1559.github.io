---
layout:     post
title:      "awk"
subtitle:   " \"文本模式匹配\""
date:       2014-06-09 12:00:00
author:     "awd"
header-img: "img/post-bg-2015.jpg"
tags:
    - linux shell
---

awk
1)逐行扫描
2)匹配则执行命令
3)匹配而未制定命令，则打印该行到屏幕

例子:
awk '/Sally/{print $1, $2}' datafile
匹配模式后，打印第一和第二个字段，即第一和第二列
字段间的分隔符为空格符

字段
  |
  |
Tom  Jones	4421	5/12/66	543354    <----记录
Mary Adams	5346	11/4/63	28765
Sally Chang	1654	7/22/54	650000
Billy Black	1683	9/23/44	336500


内置变量：
ORS：输入记录的分隔符(行分隔符)	，默认为换行符
RS： 输出记录的分隔符		，默认为换行符
FS:  输入字段分隔符		，默认为空格	awk -F'[ \t:]'(设为空格、制表符、或:)
OFS: 输出字段分割符		,默认为单个空格

NR:  每条记录的记录号
NF:  记录的字段数

awk option '/patten/{action}' filenames


awk '$1 ~ /Bill/' filename		#在第一个字段里匹配模式，而不是整行
awk '$2 !~ /Adam/' filename		#打印第二列不匹配模式的行
awk '$3 > 5000{print $1}' filename	#如果第三列>5000，打印第一列
awk '{max=($1 > $2) ?$1:$2; print max}' filename	#第一列和第二列中的值，打印值大的一列
awk '$3*$4 > 500' filename		#第三列和第四列乘积> 500的行输出
awk '$2 >5 && $2 <=15' filename		#并且
awk '/Tom/, /Suzanne/' filename		#范围

awk '$1 ~ /Tom/{wage = $2*$3;print wage}' filename	#定义变量
awk '$4>70 {print $1, $2 > "passing_file"}' filename	#重定向部分结果

awk 'BEGIN{"date"| getline d; print d}' filename	#getline函数从标准输入、管道、文件读取输入到变量d
awk 'BEGIN{"date"| getline d; split(d,mon); print mon[2]}' filename 
awk 'BEGIN{while("ls"|getline) print}' filename		#每循环一次，getline从ls中读取一行

awk 'BEGIN{printf "what is your name:"; \
getline name < "/dev/tty" }\				#读入查找的名字
$1 ~ name {print "Found " name " on line ", NR "."}\	#在第一个字段中查找
END{print "See ya, " name "."}' filename
