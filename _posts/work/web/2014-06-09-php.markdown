---
layout:     post
title:      "php"
subtitle:   " \"php\""
date:       2014-06-09 12:00:00
author:     "awd"
header-img: "img/post-bg-2015.jpg"
tags:
    - web
---

# laravel

#### install

```
composer global require "laravel/installer"
```

```
# create project 
laravel new my_project_name

# install depends packages
composer install
composer update
```


```
#composer cn mirror
#in composer.json
{
    "repositories": [
        {   
            "packagist": false
        },  
        {   
            "type": "composer", 
            "url": "http://packagist.cn"
        }   
    ]
}
```

#### basic

```
#list all commands
php artisan
php artisan list

#generate key
php artisan key:generate 

#start server
php artisan serve
```


```
app:name          #change App namespace
cache:table       #
db:seed           #
route:list        #list routes
session:table     #create session table in database
```

#### packages

- [way/generators](https://packagist.org/packages/way/generators)

```
"require-dev": {
    "way/generators": "~2.0"
}
```


	# use laravel command like rails generate
	generate:model
	generate:view
	generate:controller
	generate:seed
	generate:migration
	generate:resource
	generate:scaffold


	#create migrate
	#keword: create、add、delete、drop
	generate:migration create_post_table	 
	generate:migration create_post_table --fields="username:string(30):unique, age:integer:nullable:default(18)"
	
	generate:model Post
	generate:view admin.reports.index

	generate:seed users
	generate:pivot orders users

	#create modle, views, controller, migrate,seed
	generate:resource post --fields="title:string, body:text"
	generate:scaffold
	generate:controller












#### todo
--------------------------------------------------


	config file : config/app.php


```
//基础
Route::get(‘/’, function() { return ‘this string is returned’;});
Route::post(‘foo/bar’, function() { return ‘sadfasdfasdf’ ;} );
Route::match([‘get’, ‘post’], ‘url’, function() {});
Route::any();

$url = url(‘for/bar’);
```

```
//带参数
Route::get('user/{id}', function ($id) {
    return 'User '.$id;
});
// 可选的参数
Route::get('user/{name?}', function ($name = null) {
    return $name;
});
//正则表达式参数
Route::get('user/{name}', function ($name) {
    //
})
->where('name', '[A-Za-z]+');
//全局正则表达式
//在RouteServiceProvider.php 的boot函数中定义
public function boot(Router $router)
{
    $router->pattern('id', '[0-9]+');

    parent::boot($router);
}
```

```
//命名Route
Route::get('user/profile', ['as' => 'profile', function () {
    //
}]);

Route::get('user/profile', [
    'as' => 'profile', 'uses' => 'UserController@showProfile'
]);


$redirect = redirect()->route(‘profile');
```

```
///////////////带参数route
Route::get('user/{id}/profile', ['as' => 'profile', function ($id) {
    //
}]);

$url = route('profile', ['id' => 1]); 
```

```
//route 组
//middleware
Route::group(['middleware' => 'auth'], function () {
    Route::get('/', function () {
        // Uses Auth Middleware
    });

    Route::get('user/profile', function () {
        // Uses Auth Middleware
    });
});
```

```
//namespaces
Route::group(['namespace' => 'Admin'], function()
{
    // Controllers Within The "App\Http\Controllers\Admin" Namespace

    Route::group(['namespace' => 'User'], function()
    {
        // Controllers Within The "App\Http\Controllers\Admin\User" Namespace
    });
});

//sub-domain routing
Route::group(['domain' => '{account}.myapp.com'], function () {
    Route::get('user/{id}', function ($account, $id) {
        //
    });
});
```

```
//route 前缀
Route::group(['prefix' => 'admin'], function () {
    Route::get('users', function () {
        // Matches The "/admin/users" URL
    });
});
```

```
//命名路由器， filter & acton
Route::get(‘user/profile’, array(‘as’ => ‘profile’, ‘before’ => ‘old’, ‘uses’ => ‘UserController@showProfile'));

//<1>Controler Action
Route::get('a', 'ArticleController@index’);

Route::get(‘/‘,  function(){
	echo "work";				//<2>直接输出

	echo Form::open();
	echo Form::close();

	return View:make(‘login’);	//<3>输出login.blade.php
});
```

```
Route::post(‘login’, function(){
	$name = Input::get(‘username’);	//获得username框数值

	Redirect::to(‘login’);		
	Redirect::route(‘login’);	
});
```


```
//Auth
if(Auth::attempt(array(‘username’ => $name, ‘password’ => $password)); //用户验证
Auth::check()		//判断用户是否已经验证
Auth::user()->email	//当前用户email
Auth::validate()	//验证但不登录
Auth::logout();//数据库定义
php artisan migrate:make final_table 
	//编辑好所有的数据库脚本
	Schema::create(‘posts’, function($table){
		$table->increments(‘id’);
			  ->string($column)
			  ->string($column, $length)
			  ->integer($column)
			  ->float($column)
			  ->decimal($column, $precision, $scale)
			  ->boolean($column)
			  ->text($column)
			  ->blob($column)
			 ->binary($column)
			 ->dateTime($column)
			 ->timestamp($column)
			 ->time($column)
			 ->enum($column, array $allowed)
			 ->timestamps()
			 ->nullable()
			 ->default($value)
			 ->unsigned()

		$table->foreign(‘user_id’)->references(‘id')->on(‘users')->onDelete(‘cascade');
	});

	Schema::create()
	Schema::drop()
	Schema::rename($to)
	Schema::dropColumn(columns)
	Schema::dropColumns()
	Schema::primary($columns, $name = null)
	Schema::unique($columns, $name = null)
	Schema::index($columns, $name = null)
	Schema::foreign($columns, $name = null)
	Schema::dropPrimary($index = null)
	Schema::dropUnique($index)
	Schema::dropIndex($index)
	Schema::dropForeightn($index)
```


```	
//Model
<?php 
class Post extends Eloquent{
	protected $table = ‘’my_users’;	//Model 的表名	
	protected $fillable = [];			//指定哪些属性可以被集体赋值
        protected $guarded = [];			//指定哪些属性不可以被集体赋值

	public function user(){
		return->belongsTo(‘User’);
	}
}

//query
$posts = Post::all();   	//获取全部
$post = Post::find(1);	//id == 1
$post = Post::findOrFail(1);
$post = Post:;where(‘votes’, ‘>’ 100)->firstOrFail();
$posts = Post::where(‘votes’, ‘>’, 100)->take(10)->get();
$count = Post::where(‘vote’, ‘<‘, 100)->count();
```


```
//注册错误处理，
App::error(function(ModelNotFoundException $e){
	return Response::make(‘Not Found’, 404);
});
```

```
//insert / update
$user = new User;
$user->name = ‘John’;
$user->save();
```

```
$affectedRows = Post::where(‘votes’, ‘>’, 100)->update(array(’status’ => 2));		//在一组模型上更新
```

```
//关系
hasOne(‘Phone’);	//一对一
belongsTo(‘User’);l	//逆向关系

hasmany(‘Comment’)	//一对多
belongsTo(‘Post’)		//逆向关系

belongsToMany(‘Role’)	//多对多
belongsToMany(‘User’)	//逆向关系
```



################################################################
balde.php模版
################################################################

```
//Form
{{ Form::open(array(‘url' => ‘foo/bar') ) }}			//要提交到view的url
{{ Form::open(array(‘route' => ‘route.name') ) }} 	//要提交到的route
{{ Form::open(array(‘action’ => ‘Controller@method') ) }} 		//要提交到的actoin
{{ Form::open(array(‘url’ => ‘foo/bar’, ‘files’ => true)) }}			//允许在表单中提交文件

echo Form::lable(‘emai’, ‘E-Mail Adress’, array(‘class’ => ‘awesome’ ) );	//文本显示
echo Form::text(‘email’, ‘example@gmail.com’);						//获取文本
echo Form::password(‘password’);
echo Form:;checkbox(’name’,  ‘value’);
echo Form::radio(’name’,  ‘value’);
echo Form::file(‘image’);						//文件上传
echo Form::select(’size’, array(‘L’ => ‘Large’, ’S’ => ’Small’ ) );
echo Form::submit(‘Click Me!’);

{{ From::close() }}
```

```
//HTML
//此处都是指public目录下的资源
{{ HTML::link(’assets/images/favicon-32.png’,  [’size’=>’32*32’] )}}
{{ HTML::style('assets/libraries/bootstrap/css/bootstrap.min.css') }}
{{ HTML::script('assets/libraries/respond.min.js') }}
{{ HTML::image(’image/example.jpg’, ’this is alt’) }}
{{ HTML::linkAsset(ur) }}
{{ HTML::linkRoute(name) }}
{{ HTML::linkActioin }}
{{ HTML::mailto }}
{{ HTML::ol }}
{{ HTML::ullistinglistingElement }}
{{ HTML::nestedListing }}
{{ HTML::attributes }}
{{ HTML::attributeElement }}
```



```
<a href="{{ route('dashboard') }}">Dashboard</a>
<a href="{{ URL::to(‘user/login') }}" ——>view/user/login.blade.php
<img src="{{ asset('assets/images/logo.png') }} "/>
```


```
//语法
@include(‘layout.header’) layout/header.blade.php

//Layout
//app/viess/layouts/master.balde.php
@section(’sidebar’)
This is the master sidebar.
@show
@yeild(‘content’, ‘Default Content') /空section，等待子view填充

//app/views/subview.blade.php
@	(‘layouts.master’) //扩展
@section(’sidebar’) //覆盖父sidebar secton
@parent
This is appended to the master sidebar.
@stop
@seciotn(‘content’) 填充content secton
this is subview body content
@stop

//注释
{{— —}}  
<!— —>注释方法会在html中渲染输出


{{ $name }}
{{ isset($name) ?name : ‘Defaut'   }}
{{ $name or ‘Default' }}

//if
@if ()
@elseif
@else
@endif


//unless
@unless()
@endunless


//for
@for($i = 0; $i < 10; $i++)
@endfor

@foreach ($posts as $post)
@endforeach

@while(true)
@endwhile
```

################################################################
帮助
################################################################

```
json_encode
json_decode

Response::json($data);
Response::download($file);
```


################################################################

```
php artisan migrate:make users_table //创建migrate文件
php artisan migrate //按照migration文件修改数据库
php artisan db:seed //插入数据库测试数据，seed文件中
php artisan controller:make UserController

//重置密码
//需要User implements Remindableinterface
php artisan auth:reminders-table
php artisan auth:reminders-controller
```




```
//自定义错误页面
app/start/global.php
App::error(function($exception, $code)
{
    switch ($code)
    {
        case 403:
            return Response::view('errors.403', array(), 403);
        case 404:
            return Response::view('awd.404', array(), 404);
        case 500:
            return Response::view('errors.500', array(), 500);
        default:
            return Response::view('errors.default', array(), $code);
    }
});
```




```
Route
Route::get(‘/’, function(){
	return ‘string’;
});

Route::post(‘/url’, function(){    });
Route::put(‘/url’, function(){      });
Route::delete(‘/url’, function() { });

Route::match([‘get’, ‘post’], ‘/url’, function() { });
Route::any(‘url’, function() { });


//使用参数
Route::get(‘user/{id}’, function($id){   });
Route::get(‘posts/{post}/comments/{comment}’,  function($postId, $commentId) {   });


Route::get(‘user/{name?}’, function($name = null) {  });
Route::get(‘user/{name?}’, function($name = ‘John’ ) {  });

//约束参数中format
Route::get(‘user/{name}’, function($name) {})->where(‘name’, ‘[A-Za-z]+’);
Route::get(‘user/{id}’, function($id){ })->where(‘id’, ‘[0-9]+’);
Route::get(‘user/{id}/{name}, function($id, $name) {})->where([‘id’ => ‘[0-9]+’, ‘name’ => ‘[z-a]+’]);

//为route命名
Route::get(‘user/profile’, [‘as’ => ‘profile’, function() {}]);
Route::get(‘user/profile’, [‘as’  => ‘profile’,  ‘users’ => ‘UserController@showProfile’ ]);

//grpu url
Route::group(['as' => 'admin::'], function () {
    Route::get('dashboard', ['as' => 'dashboard', function () {
        // Route named "admin::dashboard"
    }]);
});
```


```
//Middleware
Route::group(['middleware' => 'auth'], function () {
    Route::get('/', function () {
        // Uses Auth Middleware
    });

    Route::get('user/profile', function () {
        // Uses Auth Middleware
    });
});

//中间件Middleware
php artisan make:middleware OldMiddleware
app/Http/Middleware
```




# thinkphp


#### create project

```
composer create-project topthink/thinkphp your-project-name
```



#### install or run
```
git clone https://github.com/top-think/think tp5
cd tp5
git clone https://github.com/top-think/framework thinkphp
cd public
php -S localhost:8888 router.php
```


```
D('User')
M('User')
A(ction)
L(anguage)
C(onfig)
S(session)
F(ast)
I(nput)
U(rl)

开启页面调试功能
'SHOW_PAGE_TRACE' => true,

// 定义公共错误模板，View/Public/error.html
'TMPL_EXCEPTION_FILE' => 'Public:error', 
// 默认错误跳转对应的模板文件
'TMPL_ACTION_ERROR' => 'Public:error', 
//成功页面
'TMPL_ACTION_SUCCESS' => 'Public:success', 

```










# cakephp

#### create project

```
composer create-project --prefer-dist cakephp/app myapp
composer install   #php.ini -> extension=php_intl.dll
```

#### run the application

```
/bin/cake server -p 3000

/config/app.php
config Database
```














# CodeIgniter

解开压缩包


















# Phalcon

#### install

```
download php_phalcon.dll
# in php.ini =>
extension=php_phalcon.dll
phalcon_x86_vc11_php5.6.0_3.0.1
```

#### install devtools

```
composer.json
{
    "require": {
        "phalcon/devtools": "dev-master"
    }
}

vendor/bin/phalcon.php
```


#### create

```
php vendor\bin\phalcon.php create-project store
```




# Nette

```
composer create-project nette/web-project myapp
php -S localhost:3000 -t www
```





# Yii

#### create project

```
composer create-project --prefer-dist yiisoft/yii2-app-basic basic 2.0.10
//or 
composer create-project --prefer-dist yiisoft/yii2-app-advanced advanced 2.0.10

composer global require "fxp/composer-asset-plugin"
composer update
```

#### init

```
init  #chose dev to enable gii
url/?r=gii

```

#### run 

```
//run yii2-app-basic
yii.bat serve localhost:3000

//run yii2-app-advanced
php -S localhost:3000
http://localhost:3000/frontend/web/index.php
```


#### debug 

```
//web/index.php
defined('YII_DEBUG') or define('YII_DEBUG', true);
defined('YII_ENV') or define('YII_ENV', 'dev');

defined('YII_DEBUG') or define('YII_DEBUG', false);
defined('YII_ENV') or define('YII_ENV', 'prod');
```

#### 全局变量

```
use Yii;
$post = Yii::$app->request->post();
$db = Yii::$app->db;
```


##### database

```
//connection
$connection = Yii::app->db;

$connection = new \yii\db\Connection([
    'dsn' => $dsn,
     'username' => $username,
     'password' => $password,
]);
$connection->open();

//select multi lines
$command = $connection->createCommand('select * from posts');
$posts = $command->queryAll();

//select single line
$command = $connection->createCommand('select * from posts where id = 1');
$post = $command->queryOne();

//select column
$command = $connection->createCommand('SELECT title FROM post');
$titles = $command->queryColumn();

//scalar
$command = $connection->createCommand('SELECT COUNT(*) FROM post');
$postCount = $command->queryScalar();


//insert one
$connection->createCommand()->insert('user', [
    'name' => 'Sam',
    'age' => 30,
])->execute();

//batch insert
$connection->createCommand()->batchInsert('user', ['name', 'age'], [
    ['Tom', 30],
    ['Jane', 20],
    ['Linda', 25],
])->execute();

//update
$command = $connection->createCommand('UPDATE post SET status=1 WHERE id=1');
$command->execute();

$connection->createCommand()->update('user', ['status' => 1], 'age > 30')->execute();


//delete
$connection->createCommand()->delete('user', 'status = 0')->execute();

//transaction
$transaction = $connection->beginTransaction();
try {
    $connection->createCommand($sql1)->execute();
     $connection->createCommand($sql2)->execute();
    // ... 执行其他 SQL 语句 ...
    $transaction->commit();
} catch(Exception $e) {
    $transaction->rollBack();
}

//嵌套事务
// 外部事务
$transaction1 = $connection->beginTransaction();
try {
    $connection->createCommand($sql1)->execute();

    // 内部事务
    $transaction2 = $connection->beginTransaction();
    try {
        $connection->createCommand($sql2)->execute();
        $transaction2->commit();
    } catch (Exception $e) {
        $transaction2->rollBack();
    }

    $transaction1->commit();
} catch (Exception $e) {
    $transaction1->rollBack();
}

```


#### database query

```
use yii\db\Query;
$rows = new Query()
  ->select(['id AS uid', 'name', 'age'])
  ->from('users u')
  ->where(['name' => 'tom'])
  ->all();

//select
select(['user_id' => 'user.id', 'email']);
select(["CONCAT(first_name, ' ', last_name) AS full_name", 'email']);
select('user_id')->distinct();

//sub query
$subQuery = (new Query())->select('COUNT(*)')->from('user')
$query = (new Query())->select(['id', 'count' => $subQuery])->from('post');

//where
where('status=1');
where('status=:status', [':status' => $status]);
where('YEAR(somedate) = 2015');
where('status=:status')->addParams([':status' => $status]);
where(['status' => $status])->andWhere(['like', 'title', $search]);
where(['like', 'name', 'test']);

//order
orderBy(['id' => SORT_ASC,'name' => SORT_DESC,]);
orderBy('id ASC, name DESC');
orderBy('id ASC')->addOrderBy('name DESC');


//groupby
groupBy(['id', 'status']);
groupBy(['id', 'status'])->addGroupBy('age');


//having
having(['status' => 1]);
having(['status' => 1])->andHaving(['>', 'age', 30]);

//limit
limit(10)->offset(20);


//join
join('LEFT JOIN', 'post', 'post.user_id = user.id');
leftJoin('post', 'post.user_id = user.id');

$query1->union($query2);

all()     //return all rows
one()     //return the first row
column()  //return the first column
scalar()  //return the first column on first row
exists()  //return 
count() 
```


#### active record

```
# 根据数据库创建ActiveRecord
php yii gii/model --tableName=post_meta --modelClass=PostMeta
```

```
use yii\db\ActiveRecord;
class User extends ActiveRecord {
  //Yii::$app->db by default;
  public static function getDb()
  {
    return \Yii::$app->db2;  // 使用名为 "db2" 的应用组件
  }

  //user table by default
  public static function tableName()
  {
    return 'users';
    //prefix
    return '{{%users}}'; 
  }

  //relationship
  public function getOrders() {
    //order.customer_id = this.id
    return $this->hasMany(Order::className(), ['customer_id' => 'id']);
  }
}

$users = User::find()
  ->where(['status' => Customer::STATUS_ACTIVE])
  ->orderBy('id')
  ->all();
```

```
//relation
class Customer extends \yii\db\ActiveRecord
{
    public function getOrders()
    {
        // 客户和订单通过 Order.customer_id -> id 关联建立一对多关系
        return $this->hasMany(Order::className(), ['customer_id' => 'id']);
    }
}

class Order extends \yii\db\ActiveRecord
{
    // 订单和客户通过 Customer.id -> customer_id 关联建立一对一关系
    public function getCustomer()
    {
        return $this->hasOne(Customer::className(), ['id' => 'customer_id']);
    }
}

//中间表
class Order extends \yii\db\ActiveRecord
{
    public function getItems()
    {
        return $this->hasMany(Item::className(), ['id' => 'item_id'])
            ->viaTable('order_item', ['order_id' => 'id']);
    }
}
```

# validation

```
class User extens ActiveRecord {
  public static function rules() {
    return [
      [['username'], 'required'],
      [['username'], 'string', 'max' => 255],
      []
    ];
  }

  public function attributeLabels(){
    return [
      'id' => 'ID',//id为数据表中的字段名，ID 为表单显示的描述  
      'name' => '用户名',  
      'password' => '密码',
    ];
  }
}
```




#### migration

```
# base_path/console/migrations/m____insert_users.php
yii migrate/create insert_users

public function up() {
  $this->createTable('{{%users}}', [
    'id' => Schema::TYPE_PK,
    'username' => Schema::TYPE_STRING . ' NOT NULL',
    'auth_key' => Schema::TYPE_STRING . '(32) NOT NULL',	#(32) 长度必须紧接着引号
    'password_hash' => Schema::TYPE_STRING . ' NOT NULL',   # not null 必须空一格
    'password_reset_token' => Schema::TYPE_STRING,
    'email' => Schema::TYPE_STRING . ' NOT NULL',
    'role' => Schema::TYPE_SMALLINT . ' NOT NULL DEFAULT 10',
    'status' => Schema::TYPE_SMALLINT . ' NOT NULL DEFAULT 10',
    'created_at' => Schema::TYPE_INTEGER . ' NOT NULL',
    'updated_at' => Schema::TYPE_INTEGER . ' NOT NULL',
  ], $this->tableOptions);

  $this->addColumn('{{%users}}', 'type' , Schema::TYPE_STRING . '(32) DEFAULT "blog" COMMENT "内容类型" AFTER `id`');
}

public function down() {
  echo "m161109_120737_insert_users cannot be reverted.\n";
  $this->dropTable('{{%user}}');
  $this->dropColumn('{{%post}}', 'type');
}


# 运行migration
php yii migrate

```

#### module
#### filter 
#### component
#### assetBundle: js, css, image
#### extensions



```
default controller/action: site/index

'controllerMap' => [
  'backup' => ['class' => 'app\controllers\MainController',]
]

'urlManager' => [
  'rules' => [
    ''
  ]
]
```





```
'components' => [
  'urlManager' => [
    'enablePrettyUrl' => true,
    'showScriptName' => false,
    'rules' => [
      '<controller:\w+>/<action:\w+>' => '<controller>/<action>',
      '<controller:\w+>/<action:\w+>/<id:\d+>' => '<controller>/<action>',
    ],
  ],
]
```










# Yaf

#### install

```
# download php_yaf.dll
http://pecl.php.net/package/yaf
	php 5.6.15
	php_yaf-2.3.3-5.6-ts-vc11-x86

# in php.ini => 
extension=php_yaf.dll
yaf.environ="product"
```


```
pecl install yaf # no release package 
```


#### create new project

```
git clone https://github.com/laruence/yaf
cd yaf/tools/cg/
php yaf_cg Sample
```
















#### Symfony2

# install on windows

```
php -r "readfile('http://symfony.com/installer');" > symfony
cURL error 60:
    download http://curl.haxx.se/ca/cacert.pem
    php.ini
    [curl]
	curl.cainfo = "D:\tools\xampp\php\extras\ssl\cacert.pem"
```

#### create project

```
php symfony new blog
```

#### run

```
cd blog
php bin\console help server:run //list help
php bin\console server:run -p 3000
```
















# php


#### basic

mac,apache

```
/etc/apache/httpd.cnf  DocumentRoot
/Library/WebServer/Documents
```

#php include a server since v5.4

```
php -t public -S localhost:4000 
php -S 0.0.0.0:4000               #for remote access
```


# php func ref

- func_get_args() 返回函数参数数组
- func_num_args() 返回函数参数个数


Array

- key($arr)
- current($arr)
- next($arr)
- end($arr)

- array_values($arr)
- array_keys($arr)
- in_array(‘item’, $arr)


# app


- [wordpress v4.5](/2014/06/09/php-wordpress)




# [pear](http://pear.php.net/)

#### install

```
sudo php /usr/lib/php/install-pear-nozlib.phar
sudo pear config-set php_ini /private/etc/php.ini
sudo pecl config-set php_ini /private/etc/php.ini
sudo pear upgrade-all
```

#### usage

```
#install package
pear install  packagenaem   

#download package
pear download packagenaem  

pear remote-list 

#list local packages
pear list
#list upgradable packages
pear list-upgrades

pear upgrade packagename 
pear upgrade-all
pear uninstall packagename 
```

```
#install to /usr/lib/php/pear
sudo pear install ch

in /etc/php.ini中include_path=".:/php/includes/:/usr/lib/pear"
pear install HTML_AJAX
require_once("HTML/AJAX.php");
```




# [composer](https://getcomposer.org)

for php 

#### install & update

```
mv composer.phar /usr/local/bin/composer
chmod a+x composer

#update composer 
/usr/local/bin/composer self-update 
```

```
#install bootstrap
composer require "twbs/bootstrap"   

#global install laravel installer 
composer global require "laravel/installer" 

#install packages in composer.json
composer install
```

#### composer.json
[schema](http://docs.phpcomposer.com/04-schema.html)

```
{
  "name":"",
  "description": "",
  "keywords":"",
  "license":"",
  "type":"",
  "require":{
    "php": ">=5.5.9",
    "laravel/framework": "5.2.*"
  },
  "require-dev":{},
  "autoload":{}
}
```

|------------|-----------------------|
|require     |needed composer package|
|require-dev |                       |
|autoload    |                       |
|autoload-dev|                       |
|scripts     |plugin scripts         |
|config      |composer config        |


