---
layout:     post
title:      "ruby"
subtitle:   " \"ruby program language\""
date:       2014-06-09 12:00:00
author:     "awd"
header-img: "img/post-bg-2015.jpg"
tags:
    - web
    - ruby
---

[ruby](https://www.ruby-lang.org/zh_cn/)
[doc](http://ruby-doc.org/)

# basic
#### 交互方式:
ruby \
puts "hhhh"
ctrl+d

irb
>irb --simple-prompt --noecho
>> for i in 1..4
>>     puts i
>> end
>> def do_some()
>>     puts "Hi"
>> end


RDoc
ri : 阅读RDoc格式的Ruby文档
ri File


#### variable

```
$global_var
@class_instance_var

puts "......#{class_instance_var}"
puts "......#{class_instance_var.length}"
```

#### Array

```
a = [1, "cat", 3.14, "sd"]
a[0]                 # 1
a[2] = 4             #[1, "cat", 4]
puts a[2, 2]         #[4, "sd"]
puts a[1..3]         #["cat", 4, "sd"]
puts a[1...3]        #["cat", 4]

```
可以实现stack， set， queue， dequeue， fifo

#### Hash

```
section = {
  'cello'    => 'hl',
  'clariner' => 'df',
  'drum'     => 'brass'
}

section['cello']   #'hl'
```

#### control

```
if 
elseif
else
end

while condition1 and condition2
end

#songs = Array.new
for i in 0...songs.length
end
```

#### Regular Expression
/reg_exp/
if line =~ /reg_exp/
end

line.sub(/reg_exp/, "replacement")

+ 一个或多个
* 零个或多个
\d 数字
\w 词
\s 空格符、制表符、回车符
. 任意字符



#### Block

```
def call_block
  puts "start"
  yield("hello", 99)
  yield("main", 88)
  puts "end"
end

call_block {|str, num| puts "in the block #{str}, #{num}"}

# output:
start
in the block hello, 99
in the block main, 88
end

```

```
animals = %w(ant bee cat dog)
animals.each do |animal|     #block
  puts animal
end

animals.each {|animal|
  puts animal
}
```



# class

```
class Song
  def initialize(name, artist, duration)
    @name = name
    @artist = artist
    @duration = duration
  end
  
  #override to_s
  #puts song calls puts song.to_s
  def to_s
    "Song: #@name -- #@artist (#@duration)"
  end
end

song = Song.new("Bicyclops", "Fleck", 260)
puts song
```

#### 继承
```
class KaraokeSong < Song
  def initialize(name, artist, duration, lyrics)
    super(name, artist, duration)
	@lyrics = lyrics
  end
  
  def to_s
    super + "[#@lyrics]" #super为父类的同名方法
  end
end
```
单继承，mixin

#### getter/setter

```
class Song
  def initialize(name, artist, duration)
    @name = name
    @artist = artist
    @duration = duration
  end
end

class Song
  def name
    @name
  end
  def artist
    @artist
  end
  def duration
    @duration
  end
  
  def duration=(new_duration)
    @duration = new_duration
  end
end

#another simple way
class Song 
  attr_reader :name, :artist, :duration
  attr_writer :name, :artist, :duration
end


song = Song.new("Bicyclops", "Fleck", 260)
puts song.artist
```

#### claass variables
```
class Song
  @@plays = 0
  def initialize()
    @plays = 0
  end
  def play
    @plays += 1
	@@plays += 1
	"this song: #@plays plays. Total #@@plays plays."
  end
end
```

#### class methord
method is public by default

class SongList
  def initialize
    @songs = Array.new
  end
  def append(song)
    @songs.push(song)
  end
  def [](index)
    @songs[index]
  end
end
```
class Example
  def instance_method
  end
  def Example.class_method
  end
end
```

//singleton
```
class MyLogger
  private_class_method :new
  @@logger = nil
  def MyLogger.create
    @@loagger = new unless @@logger
	@@loger
  end
end
```



# module

```
module Momo
  class MyClass
end

require 'trig.rb'
require 'Momo'


class app < Momo::MyClass
end
```


散列参数
关键字参数
def create_search(name, params)
end

list.create_search("search this", {'genre' => 'jazz', 'duration_less_than' => 270})
无需使用{}传递hash，可写成如下格式:
list.create_search('search this', 'genre' => 'jazz', 'duration_less_than' => 270)
使用symbol作为参数，又可写成如下格式：
list.create_search('search this', :genre => :jazz, :duration_less_than => 270)
