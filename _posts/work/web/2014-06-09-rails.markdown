---
layout:     post
title:      "rails"
subtitle:   " \"rails\""
date:       2014-06-09 12:00:00
author:     "awd"
header-img: "img/post-bg-2015.jpg"
tags:
    - web
---

# install 

#### install on mac

```
install xcode-command-line tool

# install ruby

# by homebrew
sudo brew install ruby 

# by rvm(evil)
curl -L https://get.rvm.io | bash -s stable
source ~/.rvm/scripts/rvm
rvm install ruby-2.3.0 --disable-binary

rvm repair all
rvm cleanup all


rvm use ruby-2.3.0
rvm —-default 2.3.0 
ruby -v
gem -v
gem source -r https://rubygems.org/             //remove source
gem source -a https://ruby.taobao.org           //add source
gem sources -l

# install rails
sudo gem install rails

```

#### install on windows

```

# install ruby & gem 
[rubyinstaller](http://rubyinstaller.org)

# install rails
gem install rails

bundle install 时候会出问题，需要devkit
www.rubyinstaller.org
自解压devkit
ruby rk.rb init
ruby rk.rb review
ruby rk.rb install


nokogiri无法找到
nokogiri不支持ruby 2.2
gem uninstall nokogiri
download Nokogiri 1.6.6.2
gem install —local ….gem
```



# info

[guides v4.1中文](http://guides.ruby-china.org/)
[guides v4.2.6](http://guides.rubyonrails.org/)
[rails doc v4.1.0](http://doc.rubyfans.com/rails/api/v4.1.0/)
[guides on github](https://github.com/JuanitoFatas/rails-style-guide/blob/master/README-zhCN.md)



# basic

#### create & run
```
rails new mytest #use sqlite3 by default
rails new mytest -d mysql
cd mytest
rails server
```


#### config
```
#Gemfile
gem 'rails', '4.2.1'
gem 'sqlite3'
gem 'mysql2'
```

```
#config/database.yml

```


#### init

```
config/initializers/*.rb
//config precompile asserts
config/initializers/asserts.rb
  Rails.application.config.assets.precompile += %w(*.js *.css)
  
//enviroments config
config/environments/development.rb
config/environments/production.rb
```

# rake

```
rake db:create  RAILS_ENV='production'   #根据database.yml生成数据库
rake db:migrate RAILS_ENV='development'  #提交migration
rake db:migrate VERSION=20080906120000
rake db:migrate:redo STEP=3
rake db:migrate:status                   #show status after migrate

rake db:seed
rake db:drop
rake db:reset

rake db:rollback
rake db:rollback STEP=3

rake about     #list ruby env

rake test
rake test:models
rake test:controllers

rake log:clear LOGS=test
```


# rails

#### basic
```
rails new <projectname>
rails <g>enerate
rails <c>onsole
rails <s>erver

rails g assets <some>

rails g controller home index
rails g model student name:string
rails g migration
rails g resource
rails g scaffold
```


#### generate 
```
rails g assets <some>
#create app/assets/javascripts/some.coffee
#create app/assets/stylesheets/some.scss
```


```
rails g migration AddStudentNo no:string
#create    db/migrate/timestamp_add_student_no.rb
```

```
rails g model student name:string
#create    db/migrate/timestamp_create_students.rb
#create    app/models/student.rb
```


```
#create assets, controller, route, erb
rails g controller home actionone actiontwo

#no assets
rails g controller api/v11/base —no-assets
```


```
rails g resource people name:string
#create    db/migrate/20160408152224_create_people.rb
#create    app/models/person.rb
#create    app/controllers/people_controller.rb
```


```
#create migration,  controller，view,test,assets
rails g scaffold people name:string
```



# seed

```
users = User.create([
  {
    email:'test-user-00@mail.com',
    name:'test-user-00',
    admin:false
  },
  {
    email:'test-user-01@mail.com',
    name:'test-user-01',
    admin:false
  }
])

rake db:seed
```





# model

#### basic

```
class User < ActiveRecord::Base
end

# create
user = User.create(name: "David", occupation: "Code Artist")

# find
users = User.all
user = User.first
david = User.find_by(name: 'David')
users = User.where(name: 'David', occupation: 'Code Artist').order('created_at DESC')


#update
user = User.find_by(name: 'David')
user.name = 'Dave'
user.save

#delete
user.destroy

```

#### migration

```
class CreateBranches < ActiveRecord::Migration
  def change
    ... ...
  end
end

add_column
add_index
add_reference
add_timestamps

create_table "superliers" do |t|
  t.column :name, :string, limit:60
end

create_table :products do |t|
	t.string :nane, null:false, limit: 60
end

create_join_table :products, :categories do |t|
	t.index :product_id
	t.index :category_id
end

drop_table
drop_join_table
remove_timestamps
rename_column
rename_index
remove_reference
rename_table

change_table :products do |t|
	t.remove :description, :name
	t.string :part_number
	t.index :part_number
	t.rename :upccode, :upc_code
end
```

|-----------|-------------------------------------|
|limit      |max length of string                 |
|precision  |: 设置decimal类型字段的精度，即整数位数
|scale      |: 设置的decimal类型字段小数点后位数
|polymorphic|: 是否为belongs_to关联添加type字段,多态关联
|null       |:是否允许该字段的值为null



#### validation

```
class User < ActiveRecord::Base
validates :title, :description, :image_url, presence: true
validates :price, numericality: {greater_than_or_equal_to: 0.01}
validates :title, uniqueness: true
validates :image_url, allow_blank: true, format: {
                with: %r{\.(gif|jpg|png)\Z}i,
                message: 'must be a URL for GIF, JPG, or PNG image.'}


end
```



#### callback

#### relationship

#### find


# view

```
<%= javascript_include_tag :defaults %>
<%= stylesheet_link_tag 'css' %>  #create <link>
<%= flash[:notice] %>

<%= link_to 'Show', student %>
<%= link_to 'Edit', edit_student_path(student) %>
<%= link_to 'Destroy', student, :confirm => 'Are you sure?', :method => :delete %>
<%= link_to 'New student', new_student_path %>

<%= button_to 'Add to Cart', :action => 'add_to_cart', :id => product %>

<%= sprintf("$%0.02f", product.price) %>
<%= number_to_currency(product.price) %>
```

# controller

```
//format.xml
def show
  @product = Product.find(params[:id])
  @orders = @product.orders
  respond_to do |format|
    format.html
  format.xml  {render :layout => false, :xml  => @product.to_xml(:include => :orders) }
  format.json {render :layout => false, :json => @product.to_json(:include => :orders) }
  end
end


format.html
format.js
format.json
format.atom
```



# route

```
#将列出所有的route
rake routes

#config/routes.rb

#get '/'
root to: 'home#index'   
root to: 'home/index'

resources :books
namespace :rbac do
  resources :roles
end



# controller


```
#只允许name, author, description参数
params.require(:book).permit(:name, :author, :description)
```




# Test

```
#fixture/products.yml
one:
  title: MyString
  description: MyText
  image_url: MyString
  price: 9.99
```

```
class ProductTest < ActiveSupport::TestCase
  test "product attributes must not be empty" do
    product = Product.new
    assert product.invalid?, "empty is not valid"
    assert product.errors[:title].any?, "title can not be empty"
    assert product.errors[:description].any?, "description can not be empty"
    assert product.errors[:price].any?, "price can not be empty"
    assert product.errors[:image_url].any?, "image_url can not be empty"
  end
  
  test "product is not valid without a unique title - i18n" do
    product = Product.new(title: products(:one).title,
    description: "yyy",
    price: 1,
    image_url: "fred.gif")
  
    assert product.invalid?
    assert_equal [I18n.translate('errors.messages.taken')], product.errors[:title]
  end
end
```

```
rake test
rake test:models
```

```
class ProductControllerTest < ActionController::TestCase
  test "should get index" do
    get :index
    
    assert_response :success
    assert_select '#columns #side a', minimum: 4
    assert_select '#main .entry', 3
    assert_select 'h3', 'Programming Ruby 1.9'
    assert_select '.price', /\$[,\d]+\.\d\d/
  end
end
```

```
rake test:controllers
```


# ruby其他web框架

```
rake 	- Sinatra - Padrino
	- Grape                  	[适合REST]
Groliath					[纤程]
Cramp
merb
rango
```


# ruby server

```
	apache
	mongrel
	unicorn
	rainbow
```

