---
layout:     post
title:      "web frontend"
subtitle:   " \"javascript,css, html, framworks, sass, less, typescript, coffeescript\""
date:       2014-06-09 12:00:00
author:     "awd"
header-img: "img/post-bg-2015.jpg"
tags:
    - web
---

# ui-framework


#### [bootstrap3](http://getbootstrap.com/)
- [github](https://github.com/twbs/bootstrap)
- [中文](http://www.bootcss.com/)






#### [uikit](http://www.getuikit.net/)
- [github](https://github.com/uikit/uikit)







#### [antd](http://ant.design/)
- [github](https://github.com/ant-design/ant-design)


```
npm install -g antd
npm install -g antd-init
mkdir example && cd example
antd-init
npm start
npm run build
```





#### [dwz](http://jui.org/)
- [github](https://github.com/dwzteam/)







#### [ligerui](http://www.ligerui.com/)






#### [jquery-ui](http://jqueryui.com/)




 


#### [foundation6](http://foundation.zurb.com/)
- [sites](https://github.com/zurb/foundation-sites)
- [apps](https://github.com/zurb/foundation-apps)



#### [AmazeUI](http://amazeui.org/)
  国产




#### [weui](https://github.com/weui)
- [demo](http://weui.github.io/weui/)

  腾讯手机webui




#### [yui3](https://github.com/yui)
  yahoo
  


#### [purecss](https://github.com/yahoo/pure/)
- [demo](http://purecss.io/)
- [source of demo site](https://github.com/yahoo/pure-site)

  yahoo




#### [angular-material](https://github.com/angular/material)

```
//install
bower install angular-material
//build
npm install
gulp build
//view the doc
gulp docs
cd dist/docs
php -S 
```



#### [angular-ui](https://angular-ui.github.io/)




#### [mobile-angular-ui](https://github.com/mcasimir/mobile-angular-ui)




#### [lumX](https://github.com/lumapps/lumX)
- [demo&doc](http://ui.lumapps.com/) 

  AngularJS, Google Material Design
  
  demo code included in github(express+angularjs)
  to use the demo
    npm install & bower install
    gulp serve
    http://localhost:8080
  
  angular.module('myModule', ['lumx']);


#### [Polymer](https://github.com/Polymer/polymer)
  google




#### [materialize](https://github.com/Dogfalo/materialize)
- [demo&doc](http://materializecss.com/)




#### [meterial-ui](https://github.com/callemall/material-ui)
- [demo](http://material-ui.com/#/)

  react.js




#### cssZenGarden
- [csszengarden](http://www.csszengarden.com/)





#### [blueprint-css](https://github.com/joshuaclayton/blueprint-css)
  2011年停止更新





#### [Koala-UI](http://git.oschina.net/openkoala/Koala-UI) 
  国产
  2014年停止更新





#### 收费
- [fineUI](http://www.fineui.com/)
  .net
  国产，基于extjs
  收费



- [extjs](https://www.sencha.com/products/extjs/)
  收费

  
- [Kendo](http://www.telerik.com/kendo-ui)
  收费
  

- [mini-ui](http://www.miniui.com/)
  based on jquery-ui
  收费










# ui-lib

#### [echarts](http://echarts.baidu.com/)


#### [ueditor](http://ueditor.baidu.com/website/)

#### [moment](http://momentjs.com/)
- [source code on github](https://github.com/moment/moment/)

  Parse, validate, manipulate, and display dates in JavaScript



#### [PhotoSwipe](http://photoswipe.com/)
- [source code on github](https://github.com/dimsemenov/PhotoSwipe)




#### [raphael](http://raphaeljs.com/)
- [source code on github](https://github.com/DmitryBaranovskiy/raphael)

  Vector Library




#### [threejs](http://threejs.org/)
- [source code on github](https://github.com/mrdoob/three.js/)

  javascript 3d library




#### [video-js](http://videojs.com/)
- [source code on github](https://github.com/videojs/video.js)

  the html5 player framework





#### [d3](https://d3js.org/)
- [source code on github](https://github.com/mbostock/d3)

  data chart




#### [DataTables](https://datatables.net/)






# js-framework

# [angularjs](https://angularjs.org/)
[source code on github](https://github.com/angular/angular.js)<br>
[angular.io](https://github.com/angular/angular.io) site for Angular 2 documentation<br>
[doc](http://docs.angularjs.cn/api)<br>

#### Angularjs in webstorm

```
create angularjs project
bower install
add configuration as nodejs
set work directory path
Live Edit -> launch , and set default index.html path
debug at random port
```


#### basic

```
var app = angular.module('app', ['ngRoute']);
var app = angular.module('app', []).run(function($rootScope) {$rootScope.name = "wwww";});
<div ng-app="app">
  <h1>name: {{ name }}</h1>
</div>

app.controller("HelloController", ['$scope', '$http', function($scope, $http){
    $http.get('http://rest-service.guides.spring.io/greeting')
        .success(function(data) {
            $scope.greeting = data;
        });
    $scope.counter = 0;
    $scope.add = function(amount) { $scrope.conter += amount; };
}]);

```


```
<html ng-app="app">
  <body>
    <div ng-controller="HelloController">
      <p>The ID is {{ greeting.id }}</p>
      <p>The content is {{ greeting.content }}</p>
      <button ng-click="add(1)" class="button">Add</button>
    </div>
    <div>
    	<input ng-model="person.name" type="text" placeholder="name">
    	<h1>Hello, {{ person.name }}</h1>
    </div>
    <script src="angular.js"></script>
    <script src="app.js"></script>
  </body>
</html>
```



```
<div ng-controller="MyController">
  <input ng-model="expr" type="text" placeholder="enter an expression" />
  <h2>{{ parseValue }}</h2>
</div>
```

```
app.controller('MyController', function($scope, $parse){
	$scope.$watch('expr', function(newVal, oldVal, scope){
	  if (newValue !== oldValue) {
        var parseFun = $parse(newVal);
        $scope.parsedValue = parseFun(scope);
	  }
	});
});
```




#### factory

```
angular.module('app.services')
.factory('User', function($http) { // injectables go here
  var backendUrl = "http://localhost:3000";  var service = {    // our factory definition
    user: {},
    setName: function(newName) { 
      service.user['name'] = newName; 
    },
    setEmail: function(newEmail) {
      service.user['email'] = newEmail;
    },
    save: function() {
      return $http.post(backendUrl + '/users', {
        user: service.user
      });
    }
  };  return service;
});
```

#### service

```
angular.module('app.services')
.service('User', function($http) { // injectables go here
  var self = this; // Save reference
  this.user = {};
  this.backendUrl = "http://localhost:3000";
  this.setName = function(newName) {
    self.user['name'] = newName;
  }
  this.setEmail = function(newEmail) {
    self.user['email'] = newEmail;
  }
  this.save = function() {
    return $http.post(self.backendUrl + '/users', {
      user: self.user
    })
  }
});

angular.module('app')
.controller('MainCtrl', function($scope, User) {
  $scope.saveUser = User.save;
});
```



##### provider

```
angular.module('app.services')
.provider('User', function() {
  this.backendUrl = "http://localhost:3000";
  this.setBackendUrl = function(newUrl) {
    if (url) this.backendUrl = newUrl;
  }
  this.$get = function($http) { // injectables go here
    var self = this;
    var service = {
      user: {},
      setName: function(newName) {
        service.user['name'] = newName;
      },
      setEmail: function(newEmail) {
        service.user['email'] = newEmail;
      },
      save: function() {
        return $http.post(self.backendUrl + '/users', {
          user: service.user
        })
      }
    };
    return service;
  }
});

angular.module('myApp')
.config(function(UserProvider) {
  UserProvider.setBackendUrl("http://myApiBackend.com/api");
})
```










# [emberjs](http://emberjs.com/)
- [source code on github](https://github.com/emberjs/ember.js)<br>










# [react](https://facebook.github.io/react/)
- [source code on github](https://github.com/facebook/react)


#### create-react-app

```
npm install -g create-react-app
create-react-app hello-world
npm start
npm run build
```




#### basic useage 

```
<script src="react.js"></script>
<script src="react-dom.js"></script>
<script src="browser.min.js"></script>
<script type="text/babel">
  var App = React.createClass({
    getInitialState: function () {
      return { count: 0 };
    },
    handleClick: function () {
      this.setState({
        count: this.state.count + 1,
      });
    },
    render: function () {
      return (
        <button onClick={this.handleClick}>
          clicks: {this.state.count}
        </button>
      );
    }
  });
  ReactDOM.render(
    <App />, document.getElementById('container')
  );
</script>
```

#### harmony usage
```
<script src="react.js"></script>
<script src="react-dom.js"></script>
<script src="browser.min.js"></script>
<script type="text/babel">
  class ExampleApplication extends React.Component {
    render() {
      var elapsed = Math.round(this.props.elapsed  / 100);
      var seconds = elapsed / 10 + (elapsed % 10 ? '' : '.0' );
      var message = `React has been successfully running for ${seconds} seconds.`;

      return <p>{message}</p>;
    }
  }
  var start = new Date().getTime();
  setInterval(() => {
    ReactDOM.render(
      <ExampleApplication elapsed={new Date().getTime() - start} />,
      document.getElementById('container')
    );
  }, 50);
</script>
```

#### commonjs

```
//package.json

"dependencies": {
    "babel-preset-es2015": "^6.6.0",
    "babel-preset-react": "^6.5.0",
    "babelify": "^7.3.0",
    "browserify": "^13.0.0",
    "react": "^15.0.2",
    "react-dom": "^15.0.2",
    "watchify": "^3.7.0"
  },
"scripts": {
    "build": "browserify ./index.js -t babelify -o bundle.js",
    "start": "watchify ./index.js -v -t babelify -o bundle.js"
  }
```

```
'use strict';

var React = require('react');
var ReactDOM = require('react-dom');

var App = React.createClass({
    getInitialState: function() {
        return { count: 0 };
    },
    handleClick: function() {
        this.setState({count: this.state.count + 1});
    },
    render: function() {
        return <button onClick={this.handleClick}>
                clicks: {this.state.count} 
            </button>;
    }
});

ReactDOM.render(<App />, document.getElementById('container'));
```

```
//.babelrc
{
  "presets": ["react", "es2015"]
}


<script src="bundle.js"></script>
```


#### precompile
```
npm install -g babel-cli
npm install babel-preset-react
babel index.js --presets react --out-dir=build
```

```
//index.js

var App = React.createClass({
  getInitialState: function() {
    return { count: 0 };
  },
  handleClick: function() {
    this.setState({count: this.state.count + 1});
  },
  render: function() {
    return <button onClick={this.handleClick}>
            clicks: {this.state.count} 
            </button>;
  }
});

ReactDOM.render(<App />, document.getElementById('container'));

```

```
<script src="build/react.js"></script>
<script src="build/react-dom.js"></script>
<script src="build/index.js"></script>
```















# [backbone](http://backbonejs.org/)
- [source code on github](https://github.com/jashkenas/backbone)<br>




# [jquery](https://jquery.com/)
- [source code on github](https://github.com/jquery/jquery)<br>




# [meteor](https://www.meteor.com/)
- [source code on github](https://github.com/meteor/meteor/)<br>

```
//install
curl https://install.meteor.com | /bin/sh
//create project
meteor create <name>
meteor add tabs:bootstrap
```

# [ionic2](http://ionicframework.com)
- [github](https://github.com/driftyco/ionic)


Apache cordova: <br>
javascript api to access device's camera, mic, etc
use Angularjs<br>
support html5, iOS 8, Android 4.1, Windows 10<br>


```
//install 
npm install -g cordova ionic

#create project
ionic start myApp
ionic start myApp blank
ionic start myApp tabs
ionic start myApp sidemenu

cd myApp
ionic platform add ios
ionic build ios
ionic emulate ios

ionic platform add android
ionic build android
ionic emulate android
```






# [spine](http://spinejs.com/)
- [source code on github](https://github.com/spine)

	Lightweight MVC library





# [egret](http://www.egret.com/)
- [source code on github](https://github.com/egret-labs)

  html5 game engine

```
//创建项目
egret create HelloWorld
//创建HelloWorld目录到当前目录

//编译项目
egret build HelloWorld
//编译HelloWorld目录中的项目

//运行项目
egret startserver HelloWorld
//自动打开http://localhost:3000/HelloWorld/launcher/index.html

//将bin-debug、launcher、resources文件夹HTTP服务器的根目录下即可运行

//使用WebStore作为IDE，打开目录即可编辑TypeScript
```









# sass

#### 定义变量

```
$fontStack: Helvetica, sans-serif;
$primaryColor: #333;

body{
  font-family: $fontStack;
  color: $primaryColor;
}
```

#### 嵌套

```
nav{
  ul{ }
  li{ }
}

//==> nav ul{} 和 nav li {}
```

#### 导入

```
@import ‘reset’;  导入_reset.scss
```


#### mixin

```
@mixin box-sizing ($sizing) { 
  -webkit-box-sizing:$sizing; 
  -moz-box-sizing:$sizing; 
  box-sizing:$sizing; 
} 
.box-border { 
  border:1px solid #ccc; 
  @include box-sizing(border-box); 
}
```


#### 扩展

```
.message{
  border:1px solid #ccc;
}
.sucess{
  @extend .message;
  border-color:green;
}
```


＃ coffeescript

#### 函数

```
//js
var square = function(x) {
  return x * x;
};

//coffee 
square = (x) -> x * x
change = -> "ok"

//js
var cube = function(x) {
  return square(x) * x;
};

//coffee
cube   = (x) -> square(x) * x

//js
var fill = function(container, liquid= "coffee") {
	return "Filling the " + container + " with " + liquid + "...";
};

//coffee
fill = (container, liquid = "coffee") ->
  "Filling the #{container} with #{liquid}..."

```

#### object array

```
//js
var song = ["do", "re", "mi", "fa", "so"];

var singers = {
  Jagger: "Rock",
  Elvis: "Roll"
};


var kids = {
  brother: {
    name: "Max",
    age: 11
  },
  sister: {
    name: "Ida",
    age: 9
  }
};

//coffee
//do not need var 
kids =
  brother:
    name: "Max"
    age:  11
  sister:
    name: "Ida"
    age:  9
```

#### if, else, unless

```
//js
if (happy && sad)
if (happy || sad)

//coffee
if happty and sad
if happy or sad
```


#### 循环与推导

```
//js
var foods = ['toast', 'cheese', 'wine']
for (var i = 0, var len = foods.length; i < len; i++) {
  food = foods[i];
  eat(food);
}

//coffee
eat food for food in ['toast', 'cheese', 'wine']

//js
var courses = ['greens', 'caviar', 'truffles', 'roast', 'cake'];
var i,j,len
for (i = j = 0, len = courses.length; j < len; i = ++j) {
  dish = courses[i];
  menu(i + 1, dish);
}

//coffee
courses = ['greens', 'caviar', 'truffles', 'roast', 'cake']
menu i + 1, dish for dish, i in courses

//coffee
foods = ['broccoli', 'spinach', 'chocolate']
eat food for food in foods when food isnt 'chocolate'

//coffee
evens = (x for x in [0..10] by 2)

yearsOld = max: 10, ida: 9, tim: 11

ages = for child, age of yearsOld
  "#{child} is #{age}"


//js
if (this.studyingEconomics) {
  while (supply > demand)    { buy(); }
  while (!(supply > demand)) { sell();}
}

//coffee
if this.studyingEconomics
  buy()  while supply > demand
  sell() until supply > demand


//js 
var num = 6;
result = (function() {
  var _results;
  _results = [];
  while(num -= 1) {_result.push(""+ num + "littile monkeys");}
  return _results;
})();

//coffee
num = 6
result = while num -= 1
  "#{num} little monkeys, jumping on the bed. One fell out and bumped his head."

```

#### Range

```
numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9] #var numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9];

start = numbers[0..2] #var start = numbers.slice(0,3);

middle = numbers[3...-2] #var middle = numbers.slice(3,-2);

end = numbers[-2..]  #var end = numbers.slice(-2);

copy = numbers[..]   #var copy = numbers.slice(0);
```


# javascript

#### call方式

```
function changeColor(color){
	this.style.color = color;
}
changeColor(“white”);	//= window.changeColor;  this == window

var main = document.getElementById(“main”);
changeColor.call(main, “black”);		//=main.changeColor(); this == main
```

#### 面向对象

```
function Lecture(name, teacher){
	this.name = name;
	this.teacher = teacher;
}
Lecture.prototype.display = function(){};
```



```
//1
var obj = new Object();
obj.val = 5;

//2
function User(name){ this.name = name;}
var me = new User(“awd”);

//3
function User(){}
var me = new User();
var you = new me.constructor();
```


#### 继承

```
User.property = new Person();
```

#### 命名空间

```
//创建默认全局命名空间
var YAHOO = {};
//设置子命名空间
YAHOO.util = {};

//创建最终命名空间
YAHOO.util.Event = {
	addEventListener: function() {}
};

//调用函数
YAHOO.util.Event.addEventListener();
```



# jquery

#### basic

```
$(document).ready(function() {});
//简写
$().ready(function() {});
$(function(){});



(function(wp, $){
  … ...
})(wp, jQuery);
```

#### extensions

```
jQuery.extend = jQuery.fn.extend = function(){};
jQuery.extend($.extend) 和jQuery.fn.extend($.fn.extend)是同一个函数 
jQuery库中，有些方法是通过调用jQuery.extend，有些是通过jQuery.fn.extend

jQuery.extend中，typeof jQuery = "function"
jQuery.extend相当于为function类添加静态方法extend
jQuery被赋值给$，所以可以使用$.extend()
```

```
使用$.extend,  扩展自定义的对象
var myself = {name: "jack"};
$.extend(myself, {
  setName:function(n){this.name = n;}
});
myself.setName("tom");  //使用
```

//扩展全局函数

```
//jQuery扩展全局函数
jQuery.foo = function(){};
$.foo();  //使用

//全局函数
$.extend({
  foo:function(){},
  bar:function(){}
});
$.foo(); $.bar()  //使用

//封装到awd对象中
$.awd = {
foo:function() {},
bar:function() {}
};
$.awd.foo();
$.awd.bar();



//添加jQuery对象方法
$.fn.xyz = function(){
  this.text("sss");
};
$('div').xyz();
$('#message').xyz();
```


```
1类级别的插件开发
1.1定义一个全局函数
jQuery.foo = function(){}
1.2使用extend定义全局函数 
jQuery.extend({
  foo:function(){},
  bar:function(){}
});


1.3使用命名空间定义函数
jQuery.plugin = {
  foo:function(){}
}

$(function(){
  $.foo();
});


2对象级别的插件开发
(function($){
  $.fn.extend({
    foo3:function() {
      alert('对象级别插件extend方式1');
    },
    bar3:function() {
      alert('对象级别插件extend方式2');
    }
  })
})(jQuery);

(function($){
  $.fn.foo4 = function() {
    alert('对象级别插件fn方式');
  }
})(jQuery);



//接收参数来控制插件的行为
(function($){
$.fn.bar4 = function(options) {
var defaults = {aaa:'1',bbb:'2'};
var opts = $.extend(defaults, options);
alert('参数值:aaa:'+opts.aaa+';bbb:'+opts.bbb);
}
})(jQuery);

//提供公有方法访问插件的配置项值
(function($){
$.fn.foo5 = function(options) {    
var opts = $.extend({}, $.fn.foo5.defaults, options);
alert('参数值:aaa:'+opts.aaa+';bbb:'+opts.bbb);
}
$.fn.foo5.defaults = {aaa:'1',bbb:'2'};
})(jQuery);

//提供公有方法来访问插件中其他的方法
(function($){
$.fn.bar5 = function(options) {
$.fn.bar5.alert(options);
}
$.fn.bar5.alert = function(params) {
alert(params);
}
})(jQuery);
```








