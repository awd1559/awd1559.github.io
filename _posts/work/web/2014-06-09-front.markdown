---
layout:     post
title:      "javascript"
subtitle:   " \"all about javascript typescript, coffeescript and nodejs, css, html, framworks, sass, less, \""
date:       2014-06-09 12:00:00
author:     "awd"
header-img: "img/post-bg-2015.jpg"
tags:
    - web
---


# [Node.js](https://nodejs.org/)
> - brew install nodejs
> - download installer from [Node.js](https://nodejs.org/)
> - [npm](https://www.npmjs.com) included


#### working in webstorm

- Edit Configration -> Node.js
- Node interpreter: usr/local/bin/node
- JavaScript file:  bin/www

```
npm install -g supervisor #monitor node code changes
supervisor app.js

//better use yomen
//and now we have dva

change jade template files will refresh on browser
```

#### usage
```
npm init #init package.json file
npm -l #display the npm command full usage
npm <cmd> -h #display the npm <cmd> help info

npm install [package] #install package to directory<node_modules>
npm update [package]
npm uninstall [package]<version>
npm view [package]

npm publish <tagball>
npm publish <folder>

npm start
npm stop

npm list #list package in directory: node_modules
npm version

npm install #install packages in package.json 
```


```
//yarn is good
//yarn use package.json as npm
yarn init         #init package.json file
yarn add [package]
yarn add [package]@[version]
yarn add [package]@[tag]
yarn remove [package]
yarn update [package]
yarn install
```




# packages


#### babel    
> - translation

```
npm i -g babel-cli
npm i --save-dev babel-core
npm i --save-dev babel-eslint
npm i --save-dev babel-loader
npm i --save-dev babel-preset-react
npm i --save-dev babel-preset-es2015
npm i --save-dev babel-preset-stage-0 
```

```
//.babelrc
{
  "presets": ["react", "es2015", "state-0"],
  "plugins": []
}
```

```
babel index.js   //output to std output
```











##### webpack
> - user Loaders to extract resources, package to one or multi-part static resources
> - yard add webpack


```
//use default config file
//package entry.js and all its used resources into build/bundle.js
//webpack.config.js
var path = require('path');

module.exports = {
    entry: path.resolve(__dirname, 'entry.js'),
    output: {
        path: path.resolve(__dirname, 'build'),
        filename: 'bundle.js',
    }
};
```



```
//webpack.config.js
var webpack = require('webpack');

module.exports = {
    entry: __dirname + "/app/main.js",
    output: {
      path: __dirname + "/build",
      filename: "bundle.js"
    },
    resolve: {
      extensions: ["", ".js", ".jsx", ".jade"]
    },

    module: {
      loaders: [
        { 
          test: /\.jade$/, 
          loader: "jade" 
        }
      ]
    },
    plugins: [
      new webpack.BannerPlugin('This file is created by awd')
    ]
};
```

```
//see progress with colors
webpack --progress --colors
//and watch files changes   
webpack --progress --colors --watch
npm i -g webpack-dev-server
webpack-dev-server --progress --colors
```


#### webpack-loaders

> - css-loader

```
yarn add style-loader css-loader --dev
{
  test:/\.css$/,
  loaders:['style','css'],    //loader: 'style!css'
  exclude:'node_modules'
}
```

> - less-loader

```
yarn add less-loader --dev
{
  test: /\.less$/,
  loader: 'style!css!less'
}
```

> - sass-loader

```
yarn add sass-loader --dev
{
  test: /\.scss$/,
  loader: 'style!css!sass'
}
```



> - url-loader

```
yarn add url-loader --dev
{
  test: /\.(png|jpg)$/,
  loader: 'url?limit=25000'
}
//小于25000的png|jpg文件，转为BASE64，存储在css中
```



> - reactjs jsx loader

```
yarn add react react-dom --dev
yarn add babel-loader --dev
yarn add babel-preset-es2015 --dev
yarn add babel-preset-react --dev

//webpack.config.js
resolve: {
    extensions: ['.js', '.jsx']
},
module: {
  loaders: [{
    test:/\.js|jsx$/,
    loaders:['babel-loader?presets[]=es2015&presets[]=react'],
    exclude:"/node_modules/"
  }]
}
```



> - Plugins

```
npm install html-webpack-plugin

new HtmlWebpackPlugin()

new HtmlWebpackPlugin({//根据模板插入css/js等生成最终HTML
  favicon:'./src/img/favicon.ico', //favicon路径
  filename:'/view/index.html',    //生成的html存放路径，相对于 path
  template:'./src/view/index.html',    //html模板路径
  inject:true,    //允许插件修改哪些内容，包括head与body
  hash:true,    //为静态资源生成hash值
  minify:{    //压缩HTML文件
    removeComments:true,    //移除HTML中的注释
    collapseWhitespace:true    //删除空白符与换行符
  }
})
```

```
new webpack.optimize.UglifyJsPlugin({    //压缩代码
    compress: {
        warnings: false
    },
    except: ['$super', '$', 'exports', 'require']    //排除关键字
}),
```

> - webpack-dev-server

```
npm install webpack-dev-server --save-dev

//package.json
"dev": "webpack-dev-server --devtool eval --progress --colors --hot --content-base build"

npm run dev   //localhost:8080

```


















#### express

```
npm i -g express
npm i -g express-generator
express test_express               //create project
cd test_express
npm install
npm start
```

```
var app = express();

//设置模版引擎
app.set('views', path.join(__dirname, 'views'))
app.set(‘view engine’, ‘html’);
app.set(‘view engine’, ‘ejs’);
app.set(‘view engine’, ‘jade’);


//路由 
app.get(‘/’, routes.index);
app.get(‘/login’, routes.login);
app.post(‘/login’, routes.doLogout);

/ab?cd    匹配abcd, acd，0个或1个b字符
/ab+cd    至少一个b
/ab*cd    0个或多个各种字符


//使用名称
var index = require('./routes/index');
app.use('/', index);

//routes/index.js
var express = require('express');
var router = express.Router();
router.get('/', function(req, res, next){
  res.render('index', {title:'传过去值'});
});


//res方法
res.download()
res.end()
res.jsoin()
res.jsonp()
res.redirect()
res.send()
res.sendFile()
res.sendStatus()
```






#### koa

//supervisor
nodejs 代码修改后必须重新启动才可以看到修改结果
supervisor可以在修改代码后自动重启
npm install -g supervisor
使用supervisor app.js 启动服务器
  会遇到supervisor不停重启的错误问题






































# tools

##### [Bower](http://bower.io/)
> - package manager for web frontend module
> - [packages](http://bower.io/search/)

> - install 
```
npm install -g bower 
```

> - usage

```
bower install bootstrap #download bootstrap to directory: bower_components

bower search [package]
bower install [package]
bower uninstall [package]
bower update [package]
bower list        //list package hierarchy in directory: bower_components

bower help
bower init        //create a simple bower.json
```


> - bower.json
```
bower init #create a simple bower.json
bower install #install dependencies in bower.json
```







#### [yeoman](http://yeoman.io)
> - framework tool for web dev

> - install
```
npm install -g yo
#yo depends on bower, grunt, gulp
npm install -g bower grunt-cli gulp
```

> - generators
```
#install generator
npm install -g generator-webapp
npm install -g generator-angular
npm install -g generator-gulp-webapp
```

[generators](http://yeoman.io/generators/)

- gulp-angular
- gulp-webapp
- mobile
- webapp
- angular
- angular-fullstack
- react-fullstack


> - usage

```
//bootstrap, sass, modernizr
yo webapp  #use grunt
yo gulp-webapp  #use gulp

//sass, bootstrap, grunt
yo angular
yo angular —coffee
yo angular:controller myController
yo angular:directive myDirective
yo angular:filter myFilter
yo angular:service myService
```






















#### [gulp](http://gulpjs.com/)
> - [中文](http://www.gulpjs.com.cn/)

> - install

```
npm -g install gulp
npm -g install gulp-cli
#install to directory: node_modules/gulp
npm install gulp

npm init
npm install --save-dev gulp #save "devDependencies" in file package.json
```

> - gulpfile.js

```
var gulp = require('gulp');

gulp.task('default', function() {
  // place code for your default task here
});
gulp.task('styles', ['default'], function() {  
  return gulp.src('src/styles/main.scss')
    .pipe(sass({ style: 'expanded' }))
    .pipe(autoprefixer('last 2 version', 'safari 5', 'ie 8', 'ie 9', 'opera 12.1', 'ios 6', 'android 4'))
    .pipe(gulp.dest('dist/assets/css'))
    .pipe(rename({suffix: '.min'}))
    .pipe(minifycss())
    .pipe(gulp.dest('dist/assets/css'))
    .pipe(notify({ message: 'Styles task complete' }));
});

```

run the task

>gulp           #run default task
>gulp --task    #list task hierarchy


> - [plugin](http://gulpjs.com/plugins/)

- 编译sass  gulp-ruby-sass
- Autoprefix: gulp-autoprefixer
- 压缩css gulp-minify-css
- JSHint    gulp-jshint
- 拼接    gulp-concat
- 丑化    gulp-uglify
- 图片压缩  gulp-imagemin
- live reload gulp-livereload
    gulp-cache    只有修改过的图片会进行压缩
    gulp-notify
    gulp-sourcemaps
























#### [grunt](http://www.gruntjs.net)

> - install

```
npm install -g grunt-cli
npm install -g grunt

npm install --save-dev grunt 
```

> - scripts

```
var gulp = require('gulp');
var sass =  require('gulp-ruby-sass');

gulp.task('sass', function(){
  return sass('source/file.scss').on('error', sass.logError)
    .pipe(gulp.dest())
});
```


> - Gruntfile
Gruntfile.js or Gruntfile.coffee

```
'use strict';
module.exports = function(grunt) {
  grunt.initConfig({
    clean: {
      src: ['dist']
    },
    uglify: {
      options: {
        banner: '<%= banner %>'
      },
      dist: {
        src: '<%= concat.dist.dest %>',dest: 'dist/ba-<%= pkg.name %>.min.js'
      },
    }
  })
}
```

```
//到项目grunt项目的根目录：
npm install  //安装依赖项目， 根据package.json(必须有内容)
grunt
grunt serve
```







































































# ui-framework


#### [antd](http://ant.design/)
- [github](https://github.com/ant-design/ant-design)

```
//dva
npm install dva-cli
dva new myapp
cd myapp
npm antd --save
npm antd-mobile --save
npm babel-plug-import --save-dev
npm start
```

```
//antd-init, not a good idea
npm install -g antd
npm install -g antd-init
mkdir example && cd example
antd-init
npm start
npm run build
```

自定义主题
```
//dva
//.roadhogrc
["import", [{"libraryName": "antd", "style": true}]]
"theme": {
  "primary-color": "#1DA57A",
},
"theme": "./theme.js",


//antd-int
//package.json
"theme": {
  "primary-color": "#1DA57A",
},
"theme": "./theme.js",

//theme.js
module.exports = () => {
  return {
    'primary-color': '#1DA57A',
    'link-color': '#1DA57A',
    'border-radius-base': '2px',
  };
};
```









#### [angular-material](https://github.com/angular/material)

```
//install
bower install angular-material
//build
npm install
gulp build
//view the doc
gulp docs
cd dist/docs
php -S 
```







#### [lumX](https://github.com/lumapps/lumX)
- [demo&doc](http://ui.lumapps.com/) 

  AngularJS, Google Material Design
  
  demo code included in github(express+angularjs)
  to use the demo
 
```
    npm install & bower install
    gulp serve
    http://localhost:8080
  
  angular.module('myModule', ['lumx']);
```


























# js-framework

# [react](https://facebook.github.io/react/)
- [source code on github](https://github.com/facebook/react)

#### start kit

> - [dva](https://github.com/dvajs/dva)
> - redux + react-router + redux-saga 
> - is the best way to start a react+redux application
> - auto load
> - support TypeScript
```
npm install dva-cli
dva new myapp
cd myapp
npm start
```


> - [create-react-app](https://github.com/facebookincubator/create-react-app)
> - used in intellij IDEA

```
npm install -g create-react-app
create-react-app hello-world
npm start
npm run build
```

> - webpack 

```
//reactjs jsx loader
yarn add react react-dom
yarn add babel-core babel-loader --dev
yarn add babel-preset-es2015 --dev
yarn add babel-preset-react --dev

//webpack.config.js
resolve: {
    extensions: ['.js', '.jsx']
},
module: {
  loaders: [{
    test:/\.js|jsx$/,
    loaders:['babel-loader?presets[]=es2015&presets[]=react'],
    exclude:"/node_modules/"
  }]
}
```

```
//app.js
import React, { Component } from 'react'
import { render } from 'react-dom'
import HelloMessage from './hello.js'

render(<HelloMessage name="John" />, document.getElementById('root'));

//hello.js
import React, { Component } from 'react';
class HelloMessage extends Component {
  render() {
    return <div>Hello {this.props.name}</div>;
  }
}

module.exports = HelloMessage  //ok
export default HelloMessage    //ok
```

```
//html
<html>
<head>
  <title>webpack+react</title>
</head>
<body>
  <div id="root"></div>
<script type="text/javascript" src="bundle.js"></script>
</body>
</html>
```

> - ~~and the obsoleted~~
> - [~~react-starter-kit~~](https://github.com/kriasoft/react-starter-kit)
```
git clone -o react-starter-kit -b master --single-branch https://github.com/kriasoft/react-starter-kit.git MyApp
cd MyApp
npm install
npm start
```

> - ~~and the obsoleted~~
> - [~~react-aspnet-boilerplate~~](https://github.com/pauldotknopf/react-aspnet-boilerplate)
```
npm install -g generator-react-aspnet-boilerplate
yo react-aspnet-boilerplate
yo react-aspnet-boilerplate:empty-template
cd src/React
npm install
gulp
dotnet restore
dotnet ef database update
dotnet run
```


#### React
> - React四大概念：
> - Component
> - JSX：
    实现了Component，封装了HTML
    JSX最终被编译为js内容，如：
    <a href="http://facebook.github.io/react/">Hello!</a>
    直接使用js就是：
    React.createElement('a', {href: 'http://facebook.github.io/react/'}, 'Hello!')

> - VDOM：提升操作DOM的性能
> - Data Flow：单项数据绑定



> - Redux:事件流
> - component -> action -> reducer -> state -> component

#### basic useage 

```
// 1. 传统写法
const App = React.createClass({});

// 2. es6 的写法
import React, { Component } from 'antd'
class App extends Component{
  render() {
    return <div>Hello {this.props.name}</div>;
  }
}

// 3. stateless 的写法（antd推荐的写法）
const App = (props) => ({});
```



```
<script src="react.js"></script>
<script src="react-dom.js"></script>
<script src="browser.min.js"></script>
<script type="text/babel">
  var App = React.createClass({
    getInitialState: function () {
      return { count: 0 };
    },
    getDefaultProps: function() {

    },
    componentWillMount: function() {

    },
    componentDidMount: function() {

    },
    handleClick: function () {
      this.setState({
        count: this.state.count + 1,
      });
    },
    render: function () {
      return (
        <button onClick={this.handleClick}>
          clicks: {this.state.count}
        </button>
      );
    }
  });
  ReactDOM.render(
    <App />, document.getElementById('container')
  );
</script>
```

#### harmony usage
```
<script src="react.js"></script>
<script src="react-dom.js"></script>
<script src="browser.min.js"></script>
<script type="text/babel">
  class ExampleApplication extends React.Component {
    constructor(props) {
      super(props);
      this.state = { count: props.initialCount };
    }

    render() {
      var elapsed = Math.round(this.props.elapsed  / 100);
      var seconds = elapsed / 10 + (elapsed % 10 ? '' : '.0' );
      var message = `React has been successfully running for ${seconds} seconds.`;

      return <p>{message}</p>;
    }
  }
  var start = new Date().getTime();
  setInterval(() => {
    ReactDOM.render(
      <ExampleApplication elapsed={new Date().getTime() - start} />,
      document.getElementById('container')
    );
  }, 50);
</script>
```


#### precompile
```
npm install -g babel-cli
npm install babel-preset-react
babel index.js --presets react --out-dir=build
```

```
//index.js

var App = React.createClass({
  getInitialState: function() {
    return { count: 0 };
  },
  handleClick: function() {
    this.setState({count: this.state.count + 1});
  },
  render: function() {
    return <button onClick={this.handleClick}>
            clicks: {this.state.count} 
            </button>;
  }
});

ReactDOM.render(<App />, document.getElementById('container'));

```

```
<script src="build/react.js"></script>
<script src="build/react-dom.js"></script>
<script src="build/index.js"></script>
```



























# [angularjs](https://angularjs.org/)
[source code on github](https://github.com/angular/angular.js)<br>
[angular.io](https://github.com/angular/angular.io) site for Angular 2 documentation<br>
[doc](http://docs.angularjs.cn/api)<br>

#### Angularjs in webstorm

```
create angularjs project
bower install
add configuration as nodejs
set work directory path
Live Edit -> launch , and set default index.html path
debug at random port
```


#### basic

```
var app = angular.module('app', ['ngRoute']);
var app = angular.module('app', []).run(function($rootScope) {$rootScope.name = "wwww";});
<div ng-app="app">
  <h1>name: {{ name }}</h1>
</div>

app.controller("HelloController", ['$scope', '$http', function($scope, $http){
    $http.get('http://rest-service.guides.spring.io/greeting')
        .success(function(data) {
            $scope.greeting = data;
        });
    $scope.counter = 0;
    $scope.add = function(amount) { $scrope.conter += amount; };
}]);

```


```
<html ng-app="app">
  <body>
    <div ng-controller="HelloController">
      <p>The ID is {{ greeting.id }}</p>
      <p>The content is {{ greeting.content }}</p>
      <button ng-click="add(1)" class="button">Add</button>
    </div>
    <div>
    	<input ng-model="person.name" type="text" placeholder="name">
    	<h1>Hello, {{ person.name }}</h1>
    </div>
    <script src="angular.js"></script>
    <script src="app.js"></script>
  </body>
</html>
```



```
<div ng-controller="MyController">
  <input ng-model="expr" type="text" placeholder="enter an expression" />
  <h2>{{ parseValue }}</h2>
</div>
```

```
app.controller('MyController', function($scope, $parse){
	$scope.$watch('expr', function(newVal, oldVal, scope){
	  if (newValue !== oldValue) {
        var parseFun = $parse(newVal);
        $scope.parsedValue = parseFun(scope);
	  }
	});
});
```




#### factory

```
angular.module('app.services')
.factory('User', function($http) { // injectables go here
  var backendUrl = "http://localhost:3000";  var service = {    // our factory definition
    user: {},
    setName: function(newName) { 
      service.user['name'] = newName; 
    },
    setEmail: function(newEmail) {
      service.user['email'] = newEmail;
    },
    save: function() {
      return $http.post(backendUrl + '/users', {
        user: service.user
      });
    }
  };  return service;
});
```

#### service

```
angular.module('app.services')
.service('User', function($http) { // injectables go here
  var self = this; // Save reference
  this.user = {};
  this.backendUrl = "http://localhost:3000";
  this.setName = function(newName) {
    self.user['name'] = newName;
  }
  this.setEmail = function(newEmail) {
    self.user['email'] = newEmail;
  }
  this.save = function() {
    return $http.post(self.backendUrl + '/users', {
      user: self.user
    })
  }
});

angular.module('app')
.controller('MainCtrl', function($scope, User) {
  $scope.saveUser = User.save;
});
```



##### provider

```
angular.module('app.services')
.provider('User', function() {
  this.backendUrl = "http://localhost:3000";
  this.setBackendUrl = function(newUrl) {
    if (url) this.backendUrl = newUrl;
  }
  this.$get = function($http) { // injectables go here
    var self = this;
    var service = {
      user: {},
      setName: function(newName) {
        service.user['name'] = newName;
      },
      setEmail: function(newEmail) {
        service.user['email'] = newEmail;
      },
      save: function() {
        return $http.post(self.backendUrl + '/users', {
          user: service.user
        })
      }
    };
    return service;
  }
});

angular.module('myApp')
.config(function(UserProvider) {
  UserProvider.setBackendUrl("http://myApiBackend.com/api");
})
```






























# [emberjs](http://emberjs.com/)
- [source code on github](https://github.com/emberjs/ember.js)
- [addons](emberaddons.com)

#### update ember

```
npm uninstall -g ember-cli
npm cache clean
bower cache clean
npm install -g ember-cli
```


```
// new project
ember new [name]


// run it
ember serve
ember s
localhost:4200 


ember g route about
app/routes/about.js
export default Ember.Route.extend({
  model() {
	return [];
  }
});

ember g model person
app/models/person.js
import Model from 'ember-data/model';
import attr from 'ember-data/attr';
export default Model.extend({
	title:attr(),
	owner::attr(),
	city:attr(),
	type:attr(),
	iamge:attr(),
	bedrooms:attr()
});

in route/index.js model() 
return this.store.findAll('person');


ember g controller [name]



ember g component listing

```


//hbs template

```
{{ #each model as |a| }}
 {{ a }}
{{ /each }}

{{ #link-to 'about' class="button" }}
{{ /link-to }}
```


# plugins

```
ember install ember-cli-template-lint
powed by ember-template-lint
.template-lintrc.js
	bare-strings
	block-indentation
	html-comments
	triple-curlies
	nested-interactive
	self-closing-void-elements
	img-alt-attributes
	invalid-interactive



ember install ember-cli-flash

template:
<button {{action "save"}}>Hide Body</button>

{{#each flashMessages.queue as |flash|}}
  {{flash-message flash=flash}}
{{/each}}

controller:
actions: {
save: function () {
	const flashMessages = Ember.get(this, 'flashMessages');
      	flashMessages.success('Successfully saved!');
    }
}



ember install ember-cli-mirage
client side Http server to send fake json data to browser



ember install ember-infinity

ember install ember-responsive
app/breakpoints.js

controller:
this.get('media.isMobile'); 

template:
{{#if media.isDesktop}}
  Desktop view!
{{/if}}


ember install ember-composable-helpers


ember install ember-browserify
npm install --save-dev my-cool-module

import MyCoolModule from "npm:my-cool-module";
```

























# [meteor](https://www.meteor.com/)
- [source code on github](https://github.com/meteor/meteor/)<br>

```
//install
curl https://install.meteor.com | /bin/sh
//create project
meteor create <name>
meteor add tabs:bootstrap
```

# [ionic2](http://ionicframework.com)
- [github](https://github.com/driftyco/ionic)


Apache cordova: <br>
javascript api to access device's camera, mic, etc
use Angularjs<br>
support html5, iOS 8, Android 4.1, Windows 10<br>


```
//install 
npm install -g cordova ionic

#create project
ionic start myApp
ionic start myApp blank
ionic start myApp tabs
ionic start myApp sidemenu

cd myApp
ionic platform add ios
ionic build ios
ionic emulate ios

ionic platform add android
ionic build android
ionic emulate android
```










# [spine](http://spinejs.com/)
- [source code on github](https://github.com/spine)

	Lightweight MVC library










# [egret](http://www.egret.com/)
- [source code on github](https://github.com/egret-labs)

  html5 game engine

```
//创建项目
egret create HelloWorld
//创建HelloWorld目录到当前目录

//编译项目
egret build HelloWorld
//编译HelloWorld目录中的项目

//运行项目
egret startserver HelloWorld
//自动打开http://localhost:3000/HelloWorld/launcher/index.html

//将bin-debug、launcher、resources文件夹HTTP服务器的根目录下即可运行

//使用WebStore作为IDE，打开目录即可编辑TypeScript
```





































# sass

#### 定义变量

```
$fontStack: Helvetica, sans-serif;
$primaryColor: #333;

body{
  font-family: $fontStack;
  color: $primaryColor;
}
```

#### 嵌套

```
nav{
  ul{ }
  li{ }
}

//==> nav ul{} 和 nav li {}
```

#### 导入

```
@import ‘reset’;  导入_reset.scss
```


#### mixin

```
@mixin box-sizing ($sizing) { 
  -webkit-box-sizing:$sizing; 
  -moz-box-sizing:$sizing; 
  box-sizing:$sizing; 
} 
.box-border { 
  border:1px solid #ccc; 
  @include box-sizing(border-box); 
}
```


#### 扩展

```
.message{
  border:1px solid #ccc;
}
.sucess{
  @extend .message;
  border-color:green;
}
```



















＃ coffeescript

#### 函数

```
//js
var square = function(x) {
  return x * x;
};

//coffee 
square = (x) -> x * x
change = -> "ok"

//js
var cube = function(x) {
  return square(x) * x;
};

//coffee
cube   = (x) -> square(x) * x

//js
var fill = function(container, liquid= "coffee") {
	return "Filling the " + container + " with " + liquid + "...";
};

//coffee
fill = (container, liquid = "coffee") ->
  "Filling the #{container} with #{liquid}..."

```

#### object array

```
//js
var song = ["do", "re", "mi", "fa", "so"];

var singers = {
  Jagger: "Rock",
  Elvis: "Roll"
};


var kids = {
  brother: {
    name: "Max",
    age: 11
  },
  sister: {
    name: "Ida",
    age: 9
  }
};

//coffee
//do not need var 
kids =
  brother:
    name: "Max"
    age:  11
  sister:
    name: "Ida"
    age:  9
```

#### if, else, unless

```
//js
if (happy && sad)
if (happy || sad)

//coffee
if happty and sad
if happy or sad
```


#### 循环与推导

```
//js
var foods = ['toast', 'cheese', 'wine']
for (var i = 0, var len = foods.length; i < len; i++) {
  food = foods[i];
  eat(food);
}

//coffee
eat food for food in ['toast', 'cheese', 'wine']

//js
var courses = ['greens', 'caviar', 'truffles', 'roast', 'cake'];
var i,j,len
for (i = j = 0, len = courses.length; j < len; i = ++j) {
  dish = courses[i];
  menu(i + 1, dish);
}

//coffee
courses = ['greens', 'caviar', 'truffles', 'roast', 'cake']
menu i + 1, dish for dish, i in courses

//coffee
foods = ['broccoli', 'spinach', 'chocolate']
eat food for food in foods when food isnt 'chocolate'

//coffee
evens = (x for x in [0..10] by 2)

yearsOld = max: 10, ida: 9, tim: 11

ages = for child, age of yearsOld
  "#{child} is #{age}"


//js
if (this.studyingEconomics) {
  while (supply > demand)    { buy(); }
  while (!(supply > demand)) { sell();}
}

//coffee
if this.studyingEconomics
  buy()  while supply > demand
  sell() until supply > demand


//js 
var num = 6;
result = (function() {
  var _results;
  _results = [];
  while(num -= 1) {_result.push(""+ num + "littile monkeys");}
  return _results;
})();

//coffee
num = 6
result = while num -= 1
  "#{num} little monkeys, jumping on the bed. One fell out and bumped his head."

```

#### Range

```
numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9] #var numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9];

start = numbers[0..2] #var start = numbers.slice(0,3);

middle = numbers[3...-2] #var middle = numbers.slice(3,-2);

end = numbers[-2..]  #var end = numbers.slice(-2);

copy = numbers[..]   #var copy = numbers.slice(0);
```




















































# javascript

#### var/const/let

> - ES6 add let
> - 作用域只在所在块中有效，没有变量提升，声明后才可使用，相同作用域中不可重复声明
> - 尽量使用let，不使用var
> - 
> - 立即执行函数(IIFE)(function () { var tmp = ...;  ... }()); 不再使用
> - { let tmp = ...; ... } 可代替IIFE
> - 
> - const 常量


> - ES6 解构(Destructuring)

```
var [a, b, c] = [1, 2, 3];  //let will ERROR
var [,,third] = ["foo", "bar", "baz"];  //third = "baz"
var [head, ...tail] = [1, 2, 3, 4];     //head = 1, tail = [2, 3, 4]

let { foo, bar } = { foo: "aaa", bar: "bbb" };
```

#### string 
> - ES6 support codepoing > 0xFFFF

```
//when codepoing > 0xFFFF, use fromCodePoint
String.fromCharCode(0x20BB7)    // => return 0x0BB7
String.fromCodePoint(0x20BB7)   

\uxxxx shows unicode, ranged between \u0000——\uFFFF
\u{20BB7}   //Unicode 0x20BB7, since ES6


//RE
/\u{61}/.test('a') // false
/\u{61}/u.test('a') // true
/^.$/.test('𠮷') // false
/\u{20BB7}/u.test('𠮷') // true , codepoint = 0x20BB7
```


#### binary

```
0b111110111 === 503 // true,
0o767 === 503 // true
```

> - Number

```
isFinite(25) // true
isFinite("25") // true
Number.isFinite(25) // true
Number.isFinite("25") // false

isNaN(NaN) // true
isNaN("NaN") // true
Number.isNaN(NaN) // true
Number.isNaN("NaN") // false

// ES5
parseInt("12.34") // 12
parseFloat('123.45#') // 123.45

// ES6
Number.parseInt("12.34") // 12
Number.parseFloat('123.45#') // 123.45
```

#### Array

```
//from()函数转换两类对象到数组：类似数组的对象（array-like object）和可遍历（iterable）的对象
let ps = document.querySelectorAll('p');

Array.from(ps).forEach(function (p) {
  console.log(p);
});


Array.from(arrayLike, x => x * x);
// 等同于
Array.from(arrayLike).map(x => x * x);



//Array.of()方法用于将一组值，转换为数组
Array.of(3, 11, 8) // [3,11,8]
Array.of(3).length // 1



//find
[1, 5, 10, 15].find(function(value, index, arr) {
    return value > 9;
}) // 10

//findIndex
[1, 5, 10, 15].findIndex(function(value, index, arr) {
    return value > 9;
}) // 2






//entries()，keys()和values()
for (let key of ['a', 'b'].keys()) {}

for (let value of ['a', 'b'].values()) {console.log(elem);}

for (let [key, value] of ['a', 'b'].entries()) {}


///
var a1 = [1, 2, 3, 4];
var a2 = [for (i of a1) i * 2];

a2 // [2, 4, 6, 8]
```







#### function

> - argument default value

```
//ES6
function log(x, y = 'World') {}

//ES5
function log(x, y) {
  y = y || 'World';
}
```


> - rest arguments

```
function push(array, ...items) { 
  items.forEach(function(item) {
    array.push(item);
    console.log(item);
  });
}

var a = [];
push(a, 1, 2, 3)            //将1,2,3打包到items Array中


function f(a, ...b, c){}   //ERROR
```




> - spread
> - 与rest正好相反

```
function add(x, y) {
  return x + y;
}
var numbers = [4, 38];
add(...numbers)         //将Array numbers拆包到[x,y]中
```

> - 只要具有Iterator接口的对象，比如Map，都可以使用spread

```
let map = new Map([
  [1, 'one'],
  [2, 'two'],
  [3, 'three'],
]);

let arr = [...map.keys()]; // [1, 2, 3]

//Generator
var go = function*(){
  yield 1;
  yield 2;
  yield 3;
};

[...go()] 
```



> - => function

```
var f = () = > {}       //基本语法
var f = (v) => {return v+1}    //可省略：var f = v => v + 1 

//如果返回对象，使用()，否则有歧义
var getTempItem = id => ({ id: id, name: "Temp" });
```







#### Set/Map

```
var items = new Set([1, 2, 3, 4, 5]);

var s = new Set();

for (i of s) {console.log(i)}

s.foreach((v,k) => v*2)
```

> - size
> - add(value)
> - delete(value)
> - has(value)
> - clear()



```
var map = new Map();
map.set('first', 'hello');
map.set('second', 'world');

for (let [key, value] of map) {
  console.log(key + " is " + value);
}
```

> - size
> - has(key)
> - get(key)
> - set(key, value)
> - delete(key)
> - clear





#### Generator/Promise
> - callback hell

```
fs.readFile(fileA, function (err, data) {
  fs.readFile(fileB, function (err, data) {
    // ...
  });
});
```

> - Promise
> - change the way to write callbacks
> - too much thens

```
var readFile = require('fs-readfile-promise');

readFile(fileA)
.then(function(data){
  console.log(data.toString());
})
.then(function(){
  return readFile(fileB);
})
.then(function(data){
  console.log(data.toString());
})
.catch(function(err) {
  console.log(err);
});
```



> - Generator
> - 异步任务的容器，用yield标明要暂停执行的地方

```
function* gen(x){
  var y = yield x + 2;
  return y;
}

var g = gen(1);
g.next() // { value: 3, done: false }
g.next() // { value: undefined, done: true }
```








#### Object

```
// ES6
class Lecture {
  constructor(name, teacher) {
    this.name = name;
    this.teacher = teacher;
  }
  display() {
    ...
  }
}
var l = new Lecture("cs", "wang");
l.display();

//继承
class ColorPoint extends Point {}
```






```
// ES5
function Lecture(name, teacher){
	this.name = name;
	this.teacher = teacher;
}
Lecture.prototype.display = function(){};

//继承
User.property = new Person();




//literal object
var myobj = {
  id:"",
  name: {
    firstName: 'Brendan',
    lastName: 'Eich'
  },
  init:function(){},
  doSomething: function(){}
};




//1
var obj = new Object();
obj.val = 5;

//2
function User(name){ this.name = name;}
var me = new User(“awd”);

//3
function User(){}
var me = new User();
var you = new me.constructor();
```



#### Module


> - ES6

```
//profile.js
var firstName = 'Michael';
var lastName = 'Jackson';
var year = 1958;

export {firstName, lastName, year};

//main.js
import {firstName, lastName, year} from './profile';


//2
export default const str = 'message'
import str from './message'
```


> - CommonJS
> - Server Node.js, Browserify use CommonJS

```
//1
//profile.js
exports.firstName = 'Michael';
exports.lastName = 'Jackson';
exports.year = 1958;

//2
//prifile.js
var firstName = 'Michael';
var lastName = 'Jackson';
var year = 1958; 
module.exports = {firstName, lastName, year}

//main.js
var profile = require('./profile')
console.log(profile.year)

let {firstName, lastName, year} = require('./profile')
console.log(year)
```






> - AMD
> - [RequireJS](http://requirejs.org/) use AMD

```
define(['./MyModule.js'], function (MyModule) { });

```






#### 命名空间

```
//创建默认全局命名空间
var YAHOO = {};
//设置子命名空间
YAHOO.util = {};

//创建最终命名空间
YAHOO.util.Event = {
	addEventListener: function() {}
};

//调用函数
YAHOO.util.Event.addEventListener();
```



#### map/reduce, filter, sort

```
var arr = [1, 3, 5, 7, 9];

let result = arr.map(x => x*x); //[1, 9, 25, 49, 81]

let result = arr.reduce((x,y) => {return x+y}); //25

arr.filter((x) => {return x % 2 !== 0})
```


#### call/apply/bind

```
function changeColor(color){
  this.style.color = color;
}
changeColor(“white”); //= window.changeColor;  this == window

const main = document.getElementById(“main”);
changeColor.call(main, “black”);    //=main.changeColor(); this == main
```




# jquery

#### basic

```
$(document).ready(function() {});
//简写
$().ready(function() {});
$(function(){});



(function(wp, $){
  … ...
})(wp, jQuery);
```

#### extensions

```
jQuery.extend = jQuery.fn.extend = function(){};
jQuery.extend($.extend) 和jQuery.fn.extend($.fn.extend)是同一个函数 
jQuery库中，有些方法是通过调用jQuery.extend，有些是通过jQuery.fn.extend

jQuery.extend中，typeof jQuery = "function"
jQuery.extend相当于为function类添加静态方法extend
jQuery被赋值给$，所以可以使用$.extend()
```

```
使用$.extend,  扩展自定义的对象
var myself = {name: "jack"};
$.extend(myself, {
  setName:function(n){this.name = n;}
});
myself.setName("tom");  //使用
```

//扩展全局函数

```
//jQuery扩展全局函数
jQuery.foo = function(){};
$.foo();  //使用

//全局函数
$.extend({
  foo:function(){},
  bar:function(){}
});
$.foo(); $.bar()  //使用

//封装到awd对象中
$.awd = {
foo:function() {},
bar:function() {}
};
$.awd.foo();
$.awd.bar();



//添加jQuery对象方法
$.fn.xyz = function(){
  this.text("sss");
};
$('div').xyz();
$('#message').xyz();
```


```
1类级别的插件开发
1.1定义一个全局函数
jQuery.foo = function(){}
1.2使用extend定义全局函数 
jQuery.extend({
  foo:function(){},
  bar:function(){}
});


1.3使用命名空间定义函数
jQuery.plugin = {
  foo:function(){}
}

$(function(){
  $.foo();
});


2对象级别的插件开发
(function($){
  $.fn.extend({
    foo3:function() {
      alert('对象级别插件extend方式1');
    },
    bar3:function() {
      alert('对象级别插件extend方式2');
    }
  })
})(jQuery);

(function($){
  $.fn.foo4 = function() {
    alert('对象级别插件fn方式');
  }
})(jQuery);



//接收参数来控制插件的行为
(function($){
$.fn.bar4 = function(options) {
var defaults = {aaa:'1',bbb:'2'};
var opts = $.extend(defaults, options);
alert('参数值:aaa:'+opts.aaa+';bbb:'+opts.bbb);
}
})(jQuery);

//提供公有方法访问插件的配置项值
(function($){
$.fn.foo5 = function(options) {    
var opts = $.extend({}, $.fn.foo5.defaults, options);
alert('参数值:aaa:'+opts.aaa+';bbb:'+opts.bbb);
}
$.fn.foo5.defaults = {aaa:'1',bbb:'2'};
})(jQuery);

//提供公有方法来访问插件中其他的方法
(function($){
$.fn.bar5 = function(options) {
$.fn.bar5.alert(options);
}
$.fn.bar5.alert = function(params) {
alert(params);
}
})(jQuery);
```




# web代码规范
使用两个空格，不用tab
嵌套元素应该缩进
属性全部使用双引号，不用单引号
自闭合标签, 使用<hr>, 不用<hr/>
不省略结束标签: </li>
IE兼容模式: <meta http-equiv="X-UA-Compatible" content="IE=Edge">
字符编码： <meta charset="UTF-8">

```
<!doctype html>
<html lang="zh-CN">
	<head>
	  <title></title>
	  <meta charset="UTF-8">
	  <meta http-equiv="X-UA-Compatible" content="IE=Edge">
	  <link rel="stylesheet" href="">
	  <style>
	    /* ... */
	  </style>
	  <script src="code.js"></script>
	</head>
	<body></body>
</html>
```




