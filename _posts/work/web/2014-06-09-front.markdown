---
layout:     post
title:      "front"
subtitle:   " \"all about javascript typescript, coffeescript and nodejs, css, html, framworks, sass, less, \""
date:       2014-06-09 12:00:00
author:     "awd"
header-img: "img/post-bg-2015.jpg"
category: web
permalink: /web/front
tags:
    - web
---
> - [web目录](/web/)

---

> - [Node.js](/web/nodejs) 
> - [tools](/web/tools)

> - framework
> - [antd](/web/antd)
> - [react](/web/react)
> - [angular](/web/angular)
> - [emberjs](/web/emberjs)
> - [vue.js](/web/vuejs)






# ui-framework







#### [angular-material](https://github.com/angular/material)

```
//install
bower install angular-material
//build
npm install
gulp build
//view the doc
gulp docs
cd dist/docs
php -S 
```







#### [lumX](https://github.com/lumapps/lumX)
- [demo&doc](http://ui.lumapps.com/) 

  AngularJS, Google Material Design
  
  demo code included in github(express+angularjs)
  to use the demo
 
```
    npm install & bower install
    gulp serve
    http://localhost:8080
  
  angular.module('myModule', ['lumx']);
```









# desktop & apps




##### [meteor](https://www.meteor.com/)
> - [source code on github](https://github.com/meteor/meteor/)

```
//install
curl https://install.meteor.com | /bin/sh
//create project
meteor create <name>
meteor add tabs:bootstrap
metetor
```

##### [ionic2](http://ionicframework.com)
- [github](https://github.com/driftyco/ionic)


Apache cordova: <br>
javascript api to access device's camera, mic, etc
use Angularjs<br>
support html5, iOS 8, Android 4.1, Windows 10<br>


```
//install 
npm install -g cordova ionic

#create project
ionic start myApp
ionic start myApp blank
ionic start myApp tabs
ionic start myApp sidemenu

cd myApp
ionic platform add ios
ionic build ios
ionic emulate ios

ionic platform add android
ionic build android
ionic emulate android
```




#### [egret](http://www.egret.com/)
- [source code on github](https://github.com/egret-labs)

  html5 game engine

```
//创建项目
egret create HelloWorld
//创建HelloWorld目录到当前目录

//编译项目
egret build HelloWorld
//编译HelloWorld目录中的项目

//运行项目
egret startserver HelloWorld
//自动打开http://localhost:3000/HelloWorld/launcher/index.html

//将bin-debug、launcher、resources文件夹HTTP服务器的根目录下即可运行

//使用WebStore作为IDE，打开目录即可编辑TypeScript
```


































# language


# sass

#### 定义变量

```
$fontStack: Helvetica, sans-serif;
$primaryColor: #333;

body{
  font-family: $fontStack;
  color: $primaryColor;
}
```

#### 嵌套

```
nav{
  ul{ }
  li{ }
}

//==> nav ul{} 和 nav li {}
```

#### 导入

```
@import ‘reset’;  导入_reset.scss
```


#### mixin

```
@mixin box-sizing ($sizing) { 
  -webkit-box-sizing:$sizing; 
  -moz-box-sizing:$sizing; 
  box-sizing:$sizing; 
} 
.box-border { 
  border:1px solid #ccc; 
  @include box-sizing(border-box); 
}
```


#### 扩展

```
.message{
  border:1px solid #ccc;
}
.sucess{
  @extend .message;
  border-color:green;
}
```



















＃ coffeescript

#### 函数

```
//js
var square = function(x) {
  return x * x;
};

//coffee 
square = (x) -> x * x
change = -> "ok"

//js
var cube = function(x) {
  return square(x) * x;
};

//coffee
cube   = (x) -> square(x) * x

//js
var fill = function(container, liquid= "coffee") {
	return "Filling the " + container + " with " + liquid + "...";
};

//coffee
fill = (container, liquid = "coffee") ->
  "Filling the #{container} with #{liquid}..."

```

#### object array

```
//js
var song = ["do", "re", "mi", "fa", "so"];

var singers = {
  Jagger: "Rock",
  Elvis: "Roll"
};


var kids = {
  brother: {
    name: "Max",
    age: 11
  },
  sister: {
    name: "Ida",
    age: 9
  }
};

//coffee
//do not need var 
kids =
  brother:
    name: "Max"
    age:  11
  sister:
    name: "Ida"
    age:  9
```

#### if, else, unless

```
//js
if (happy && sad)
if (happy || sad)

//coffee
if happty and sad
if happy or sad
```


#### 循环与推导

```
//js
var foods = ['toast', 'cheese', 'wine']
for (var i = 0, var len = foods.length; i < len; i++) {
  food = foods[i];
  eat(food);
}

//coffee
eat food for food in ['toast', 'cheese', 'wine']

//js
var courses = ['greens', 'caviar', 'truffles', 'roast', 'cake'];
var i,j,len
for (i = j = 0, len = courses.length; j < len; i = ++j) {
  dish = courses[i];
  menu(i + 1, dish);
}

//coffee
courses = ['greens', 'caviar', 'truffles', 'roast', 'cake']
menu i + 1, dish for dish, i in courses

//coffee
foods = ['broccoli', 'spinach', 'chocolate']
eat food for food in foods when food isnt 'chocolate'

//coffee
evens = (x for x in [0..10] by 2)

yearsOld = max: 10, ida: 9, tim: 11

ages = for child, age of yearsOld
  "#{child} is #{age}"


//js
if (this.studyingEconomics) {
  while (supply > demand)    { buy(); }
  while (!(supply > demand)) { sell();}
}

//coffee
if this.studyingEconomics
  buy()  while supply > demand
  sell() until supply > demand


//js 
var num = 6;
result = (function() {
  var _results;
  _results = [];
  while(num -= 1) {_result.push(""+ num + "littile monkeys");}
  return _results;
})();

//coffee
num = 6
result = while num -= 1
  "#{num} little monkeys, jumping on the bed. One fell out and bumped his head."

```

#### Range

```
numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9] #var numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9];

start = numbers[0..2] #var start = numbers.slice(0,3);

middle = numbers[3...-2] #var middle = numbers.slice(3,-2);

end = numbers[-2..]  #var end = numbers.slice(-2);

copy = numbers[..]   #var copy = numbers.slice(0);
```




















































# javascript

#### var/const/let

> - ES6 add let
> - 作用域只在所在块中有效，没有变量提升，声明后才可使用，相同作用域中不可重复声明
> - 尽量使用let，不使用var
> - 
> - 立即执行函数(IIFE)(function () { var tmp = ...;  ... }()); 不再使用
> - { let tmp = ...; ... } 可代替IIFE
> - 
> - const 常量


> - ES6 解构(Destructuring)

```
var [a, b, c] = [1, 2, 3];  //let will ERROR
var [,,third] = ["foo", "bar", "baz"];  //third = "baz"
var [head, ...tail] = [1, 2, 3, 4];     //head = 1, tail = [2, 3, 4]

let { foo, bar } = { foo: "aaa", bar: "bbb" };
```

#### string 
> - ES6 support codepoing > 0xFFFF

```
//when codepoing > 0xFFFF, use fromCodePoint
String.fromCharCode(0x20BB7)    // => return 0x0BB7
String.fromCodePoint(0x20BB7)   

\uxxxx shows unicode, ranged between \u0000——\uFFFF
\u{20BB7}   //Unicode 0x20BB7, since ES6


//RE
/\u{61}/.test('a') // false
/\u{61}/u.test('a') // true
/^.$/.test('𠮷') // false
/\u{20BB7}/u.test('𠮷') // true , codepoint = 0x20BB7
```


#### binary

```
0b111110111 === 503 // true,
0o767 === 503 // true
```

> - Number

```
isFinite(25) // true
isFinite("25") // true
Number.isFinite(25) // true
Number.isFinite("25") // false

isNaN(NaN) // true
isNaN("NaN") // true
Number.isNaN(NaN) // true
Number.isNaN("NaN") // false

// ES5
parseInt("12.34") // 12
parseFloat('123.45#') // 123.45

// ES6
Number.parseInt("12.34") // 12
Number.parseFloat('123.45#') // 123.45
```

#### Array

```
//from()函数转换两类对象到数组：类似数组的对象（array-like object）和可遍历（iterable）的对象
let ps = document.querySelectorAll('p');

Array.from(ps).forEach(function (p) {
  console.log(p);
});


Array.from(arrayLike, x => x * x);
// 等同于
Array.from(arrayLike).map(x => x * x);



//Array.of()方法用于将一组值，转换为数组
Array.of(3, 11, 8) // [3,11,8]
Array.of(3).length // 1



//find
[1, 5, 10, 15].find(function(value, index, arr) {
    return value > 9;
}) // 10

//findIndex
[1, 5, 10, 15].findIndex(function(value, index, arr) {
    return value > 9;
}) // 2






//entries()，keys()和values()
for (let key of ['a', 'b'].keys()) {}

for (let value of ['a', 'b'].values()) {console.log(elem);}

for (let [key, value] of ['a', 'b'].entries()) {}


///
var a1 = [1, 2, 3, 4];
var a2 = [for (i of a1) i * 2];

a2 // [2, 4, 6, 8]
```







#### function

> - argument default value

```
//ES6
function log(x, y = 'World') {}

//ES5
function log(x, y) {
  y = y || 'World';
}
```


> - rest arguments

```
function push(array, ...items) { 
  items.forEach(function(item) {
    array.push(item);
    console.log(item);
  });
}

var a = [];
push(a, 1, 2, 3)            //将1,2,3打包到items Array中


function f(a, ...b, c){}   //ERROR
```




> - spread
> - 与rest正好相反

```
function add(x, y) {
  return x + y;
}
var numbers = [4, 38];
add(...numbers)         //将Array numbers拆包到[x,y]中
```

> - 只要具有Iterator接口的对象，比如Map，都可以使用spread

```
let map = new Map([
  [1, 'one'],
  [2, 'two'],
  [3, 'three'],
]);

let arr = [...map.keys()]; // [1, 2, 3]

//Generator
var go = function*(){
  yield 1;
  yield 2;
  yield 3;
};

[...go()] 
```



> - => function

```
var f = () = > {}       //基本语法
var f = (v) => {return v+1}    //可省略：var f = v => v + 1 

//如果返回对象，使用()，否则有歧义
var getTempItem = id => ({ id: id, name: "Temp" });
```







#### Set/Map

```
var items = new Set([1, 2, 3, 4, 5]);

var s = new Set();

for (i of s) {console.log(i)}

s.foreach((v,k) => v*2)
```

> - size
> - add(value)
> - delete(value)
> - has(value)
> - clear()



```
var map = new Map();
map.set('first', 'hello');
map.set('second', 'world');

for (let [key, value] of map) {
  console.log(key + " is " + value);
}
```

> - size
> - has(key)
> - get(key)
> - set(key, value)
> - delete(key)
> - clear





#### Generator/Promise
> - callback hell

```
fs.readFile(fileA, function (err, data) {
  fs.readFile(fileB, function (err, data) {
    // ...
  });
});
```

> - Promise
> - change the way to write callbacks
> - too much thens

```
var readFile = require('fs-readfile-promise');

readFile(fileA)
.then(function(data){
  console.log(data.toString());
})
.then(function(){
  return readFile(fileB);
})
.then(function(data){
  console.log(data.toString());
})
.catch(function(err) {
  console.log(err);
});
```



> - Generator
> - 异步任务的容器，用yield标明要暂停执行的地方

```
function* gen(x){
  var y = yield x + 2;
  return y;
}

var g = gen(1);
g.next() // { value: 3, done: false }
g.next() // { value: undefined, done: true }
```








#### Object

```
// ES6
class Lecture {
  constructor(name, teacher) {
    this.name = name;
    this.teacher = teacher;
  }
  display() {
    ...
  }
}
var l = new Lecture("cs", "wang");
l.display();

//继承
class ColorPoint extends Point {}
```






```
// ES5
function Lecture(name, teacher){
	this.name = name;
	this.teacher = teacher;
}
Lecture.prototype.display = function(){};

//继承
User.property = new Person();




//literal object
var myobj = {
  id:"",
  name: {
    firstName: 'Brendan',
    lastName: 'Eich'
  },
  init:function(){},
  doSomething: function(){}
};




//1
var obj = new Object();
obj.val = 5;

//2
function User(name){ this.name = name;}
var me = new User(“awd”);

//3
function User(){}
var me = new User();
var you = new me.constructor();
```



#### Module


> - ES6

```
//profile.js
var firstName = 'Michael';
var lastName = 'Jackson';
var year = 1958;

export {firstName, lastName, year};

//main.js
import {firstName, lastName, year} from './profile';


//2
export default const str = 'message'
import str from './message'
```


> - CommonJS
> - Server Node.js, Browserify use CommonJS

```
//1
//profile.js
exports.firstName = 'Michael';
exports.lastName = 'Jackson';
exports.year = 1958;

//2
//prifile.js
var firstName = 'Michael';
var lastName = 'Jackson';
var year = 1958; 
module.exports = {firstName, lastName, year}

//main.js
var profile = require('./profile')
console.log(profile.year)

let {firstName, lastName, year} = require('./profile')
console.log(year)
```






> - AMD
> - [RequireJS](http://requirejs.org/) use AMD

```
define(['./MyModule.js'], function (MyModule) { });

```






#### 命名空间

```
//创建默认全局命名空间
var YAHOO = {};
//设置子命名空间
YAHOO.util = {};

//创建最终命名空间
YAHOO.util.Event = {
	addEventListener: function() {}
};

//调用函数
YAHOO.util.Event.addEventListener();
```



#### map/reduce, filter, sort

```
var arr = [1, 3, 5, 7, 9];

let result = arr.map(x => x*x); //[1, 9, 25, 49, 81]

let result = arr.reduce((x,y) => {return x+y}); //25

arr.filter((x) => {return x % 2 !== 0})
```


#### call/apply/bind

```
function changeColor(color){
  this.style.color = color;
}
changeColor(“white”); //= window.changeColor;  this == window

const main = document.getElementById(“main”);
changeColor.call(main, “black”);    //=main.changeColor(); this == main
```




# jquery

#### basic

```
$(document).ready(function() {});
//简写
$().ready(function() {});
$(function(){});



(function(wp, $){
  … ...
})(wp, jQuery);
```

#### extensions

```
jQuery.extend = jQuery.fn.extend = function(){};
jQuery.extend($.extend) 和jQuery.fn.extend($.fn.extend)是同一个函数 
jQuery库中，有些方法是通过调用jQuery.extend，有些是通过jQuery.fn.extend

jQuery.extend中，typeof jQuery = "function"
jQuery.extend相当于为function类添加静态方法extend
jQuery被赋值给$，所以可以使用$.extend()
```

```
使用$.extend,  扩展自定义的对象
var myself = {name: "jack"};
$.extend(myself, {
  setName:function(n){this.name = n;}
});
myself.setName("tom");  //使用
```

//扩展全局函数

```
//jQuery扩展全局函数
jQuery.foo = function(){};
$.foo();  //使用

//全局函数
$.extend({
  foo:function(){},
  bar:function(){}
});
$.foo(); $.bar()  //使用

//封装到awd对象中
$.awd = {
foo:function() {},
bar:function() {}
};
$.awd.foo();
$.awd.bar();



//添加jQuery对象方法
$.fn.xyz = function(){
  this.text("sss");
};
$('div').xyz();
$('#message').xyz();
```


```
1类级别的插件开发
1.1定义一个全局函数
jQuery.foo = function(){}
1.2使用extend定义全局函数 
jQuery.extend({
  foo:function(){},
  bar:function(){}
});


1.3使用命名空间定义函数
jQuery.plugin = {
  foo:function(){}
}

$(function(){
  $.foo();
});


2对象级别的插件开发
(function($){
  $.fn.extend({
    foo3:function() {
      alert('对象级别插件extend方式1');
    },
    bar3:function() {
      alert('对象级别插件extend方式2');
    }
  })
})(jQuery);

(function($){
  $.fn.foo4 = function() {
    alert('对象级别插件fn方式');
  }
})(jQuery);



//接收参数来控制插件的行为
(function($){
$.fn.bar4 = function(options) {
var defaults = {aaa:'1',bbb:'2'};
var opts = $.extend(defaults, options);
alert('参数值:aaa:'+opts.aaa+';bbb:'+opts.bbb);
}
})(jQuery);

//提供公有方法访问插件的配置项值
(function($){
$.fn.foo5 = function(options) {    
var opts = $.extend({}, $.fn.foo5.defaults, options);
alert('参数值:aaa:'+opts.aaa+';bbb:'+opts.bbb);
}
$.fn.foo5.defaults = {aaa:'1',bbb:'2'};
})(jQuery);

//提供公有方法来访问插件中其他的方法
(function($){
$.fn.bar5 = function(options) {
$.fn.bar5.alert(options);
}
$.fn.bar5.alert = function(params) {
alert(params);
}
})(jQuery);
```




# web代码规范
使用两个空格，不用tab
嵌套元素应该缩进
属性全部使用双引号，不用单引号
自闭合标签, 使用<hr>, 不用<hr/>
不省略结束标签: </li>
IE兼容模式: <meta http-equiv="X-UA-Compatible" content="IE=Edge">
字符编码： <meta charset="UTF-8">

```
<!doctype html>
<html lang="zh-CN">
	<head>
	  <title></title>
	  <meta charset="UTF-8">
	  <meta http-equiv="X-UA-Compatible" content="IE=Edge">
	  <link rel="stylesheet" href="">
	  <style>
	    /* ... */
	  </style>
	  <script src="code.js"></script>
	</head>
	<body></body>
</html>
```




