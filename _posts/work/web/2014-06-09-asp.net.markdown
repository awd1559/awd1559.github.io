---
layout:     post
title:      "asp.net"
subtitle:   " \"asp.net\""
date:       2014-06-09 12:00:00
author:     "awd"
header-img: "img/post-bg-2015.jpg"
tags:
    - web
    - asp
---

![respond](/img/aspnet.gif)





# ocx 2012
```
CPrintCtrl:
virtual BOOL IsInvokeAllowed(DISPID dispid);
BOOL CPrintCtrl::IsInvokeAllowed(DISPID dispid)
{
	return true;
}
```

# entity framework

http://docs.efproject.net/

## add Entity Framework
	tools -> Library Package Manager -> NGut

## app.config
```
//after setup section
<connectionStrings>
    <add name="SQLServerContext" providerName="System.Data.SqlClient" connectionString="Server=(local);Database=spring;Trusted_Connection=true;UId=sa;Pwd=SAsa123" />
</connectionStrings>

//mysql, not tested
<connectionStrings>
	<add name="MySQLContext" providerName="MySql.Data.MySqlClient" 
		connectionString="server=localhost;User Id=admin;password=test;database=BloggingContext;Character Set=utf8;" />
</connectionStrings>

//SQLServer 2012 LocalDb
<connectionStrings>
	<add name="LocalConnection" connectionString="Data Source=(LocalDb)\v11.0;Initial Catalog=aspnet-Dong.Web;Integrated Security=SSPI;AttachDBFilename=|DataDirectory|\aspnet-Dong.Web.mdf" providerName="System.Data.SqlClient" />
</connectionStrings>

//sqlite
<add name="SqliteConnection" connectionString="data source=SqliteTest.db" providerName="System.Data.SQLite.EF6" />
```

## Modaling
```
class SpringContext : DbContext
{
	public SpringContext() : base("SpringContext") { }

	public DbSet<User> Users { get; set; }

	public DbSet<PictureCategory> PictureCategories { get; set; }

	protected override void OnModelCreating(DbModelBuilder modelBuilder)
	{
		base.OnModelCreating(modelBuilder);
		modelBuilder.Entity<PictureCategory>()
			.HasMany(cat => cat.SubCategories)
			.WithOptional(cat => cat.ParentCategory);
	}
}

class User
{
	public int id { get; set; }
	public string name { get; set; }
}

public class PictureCategory
{
	[Key]
	[DatabaseGenerated(DatabaseGeneratedOption.Identity)]
	public int CategoryId {get;private set;}
	public string Name { get; set; }
	public int? ParentCategoryId {get; private set;}

	[ForeignKey("ParentCategoryId")]
	public PictureCategory ParentCategory {get; set;}

	public List<PictureCategory> Subcategories { get; set; }

	public PictureCategory()
	{
		Subcategories = new List<PictureCategory>();
	}
}

```

////////////////////////////////
//code first
//默认将以类似Id结尾来命名的属性当作主键，如ID，Id，自动设置为主键
//如果该属性是int类型，Code First会在数据库中默认将该列设置为自增长。

//属性到sql的映射
string  -> nvarchar(max)
byte[]  -> varbinary(max)
bool    -> bit
decimal -> decimal(18, 2)
float   -> float
bool, decimal, float等是值类型,不能为给他们分配Null值。

List<>属性为一对多关系




//配置数据库
1、使用Data Annotations配置
[Key]
public int DestinationId { get; set; }



[ForeignKey("DestinationId")]
public Destination Destination { get; set; }

[ForeignKey("Accommodation")]
public int AccommodationId { get; set; }



[MinLength(10),MaxLength(30)]
public string Name { get; set; }
[StringLength(30)]
public string Country { get; set; }

//非空
[Required(ErrorMessage="请输入描述")]
public string Description { get; set; }

[Column(TypeName = "ntext")]
public string Owner { get; set; }
modelBuilder.Entity<Lodging>().Property(p => p.Owner).HasColumnType("ntext");

[Table("MyLodging")]
modelBuilder.Entity<Lodging>().ToTable("MyLodging");

[Column("MyName")]
modelBuilder.Entity<Lodging>().Property(p => p.Name).HasColumnName("MyName");

//自增长
[Key, DatabaseGenerated(DatabaseGeneratedOption.Identity)]
public Guid SocialId { get; set; }
modelBuilder.Entity<Person>().Property(p => p.SocialId).HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);


//计算属性
[NotMapped]
public string Name
{
	get 
	{
		return FirstName + " " + LastName;
	}
}
modelBuilder.Entity<Person>().Ignore(p => p.Name);

//非映射表
[NotMapped]
public class Person {}
modelBuilder.Ignore<Person>();

//时间戳
[Timestamp]
public Byte[] TimeStamp { get; set; }
modelBuilder.Entity<Loding>().Property(p => p.TimeStamp).IsRowVersion();

//复杂类型
//Address属性映射到数据库中两列: Address_Country, Address_City
[ComplexType]
public class Address
{
	public string Country { get; set; }
	public string City { get; set; }
}
modelBuilder.ComplexType<Address>();

[InverseProperty("PrimaryContactFor")] 



2、Fluent API
public class BreakAwayContext : DbContext
{
	public DbSet<Destination> Destinations { get; set; }
	public DbSet<Lodging> Lodgings { get; set; }

	protected override void OnModelCreating(DbModelBuilder modelBuilder)
	{
		//Fluent API

		//Destinatin主键
		modelBuilder.Entity<Destination>().HasKey(d => d.DestinationId);

		//Destinatin 1:n Loading, ForeignKey: DestinatinId  
		modelBuilder.Entity<Lodging>().HasRequired(p => p.Destination).WithMany(p=>p.Lodings).HasForeignKey(p => p.DestinationId);

		//长度
		modelBuilder.Entity<Destination>().Property(p => p.Name).HasMaxLength(30);
		modelBuilder.Entity<Destination>().Property(p => p.Country).HasMaxLength(30);

		//非空
		modelBuilder.Entity<Destination>().Property(p => p.Country).IsRequired()

		base.OnModelCreating(modelBuilder);
	}
} 







////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
DbContext
db.People.Add(new People(){ FirstName = ""; LastName = "";})
db.People.FirstOrDefault()
db.SaveChanges();











[DisplayName("电子邮件地址")]
public string Email {get;set;}

@Html.DisplayNameFor(model => model.Email)


@using (Html.BeginForm()) {
	@Html.ValidationSumary(true)
	@Html.LabelFor(model => model.name)
	@Html.EditorFor(model => model.name)
	@Html.ValidationMessageFor(model => model.name)
}
