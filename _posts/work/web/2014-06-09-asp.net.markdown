---
layout:     post
title:      "asp.net"
subtitle:   " \"asp.net\""
date:       2014-06-09 12:00:00
author:     "awd"
header-img: "img/post-bg-2015.jpg"
tags:
    - web
    - asp
---

![respond](/img/aspnet.gif)





# ocx 2012
```
CPrintCtrl:
virtual BOOL IsInvokeAllowed(DISPID dispid);
BOOL CPrintCtrl::IsInvokeAllowed(DISPID dispid)
{
	return true;
}
```

# entity framework

http://docs.efproject.net/

## add Entity Framework
	tools -> Library Package Manager -> NGut

## app.config
```
//after setup section
<connectionStrings>
    <add name="SQLServerContext" providerName="System.Data.SqlClient" connectionString="Server=(local);Database=spring;Trusted_Connection=true;UId=sa;Pwd=SAsa123" />
</connectionStrings>

//mysql, not tested
<connectionStrings>
	<add name="MySQLContext" providerName="MySql.Data.MySqlClient" 
		connectionString="server=localhost;User Id=admin;password=test;database=BloggingContext;Character Set=utf8;" />
</connectionStrings>

//SQLServer 2012 LocalDb
<connectionStrings>
	<add name="LocalConnection" connectionString="Data Source=(LocalDb)\v11.0;Initial Catalog=aspnet-Dong.Web;Integrated Security=SSPI;AttachDBFilename=|DataDirectory|\aspnet-Dong.Web.mdf" providerName="System.Data.SqlClient" />
</connectionStrings>

//sqlite
<add name="SqliteConnection" connectionString="data source=SqliteTest.db" providerName="System.Data.SQLite.EF6" />
```

## Modaling
```
class SpringContext : DbContext
{
	public SpringContext() : base("SpringContext") { }

	public DbSet<User> Users { get; set; }

	public DbSet<PictureCategory> PictureCategories { get; set; }

	protected override void OnModelCreating(DbModelBuilder modelBuilder)
	{
		base.OnModelCreating(modelBuilder);
		modelBuilder.Entity<PictureCategory>()
			.HasMany(cat => cat.SubCategories)
			.WithOptional(cat => cat.ParentCategory);
	}
}

class User
{
	public int id { get; set; }
	public string name { get; set; }
}

public class PictureCategory
{
	[Key]
	[DatabaseGenerated(DatabaseGeneratedOption.Identity)]
	public int CategoryId {get;private set;}
	public string Name { get; set; }
	public int? ParentCategoryId {get; private set;}

	[ForeignKey("ParentCategoryId")]
	public PictureCategory ParentCategory {get; set;}

	public List<PictureCategory> Subcategories { get; set; }

	public PictureCategory()
	{
		Subcategories = new List<PictureCategory>();
	}
}

```

## code first
```
//默认将以类似Id结尾来命名的属性当作主键，如ID，Id，自动设置为主键
//如果该属性是int类型，Code First会在数据库中默认将该列设置为自增长。

//属性到sql的映射
string  -> nvarchar(max)
byte[]  -> varbinary(max)
bool    -> bit
decimal -> decimal(18, 2)
float   -> float
bool, decimal, float等是值类型,不能为给他们分配Null值。

List<>属性为一对多关系
```




#### Data Annotations
```
[Key]
public int DestinationId { get; set; }

[ForeignKey("DestinationId")]
public Destination Destination { get; set; }

[ForeignKey("Accommodation")]
public int AccommodationId { get; set; }

[MinLength(10),MaxLength(30)]
public string Name { get; set; }   
=> nvarchar(5)

[StringLength(30), ErrorMessage=""]
[DisplayName("账号")]
public string Account { get; set; }


[DatabaseGenerated(DatabaseGeneratedOption.Computed)]
public DateTime CreatedOn { get; set; }
=> ef 不再追踪CreatedOn字段的值变化
=> 需要手动在数据库中设置默认值为getdate()


[RegularExxpression(@"^(", ErrorMessage="请输入正确的Email格式")]
public string Email { get; set; }

[Range(1, 3, ErrorMessage="")]
public int EmotionIcon { get; set; }


//非空
[Required(ErrorMessage="请输入描述")]
public string Description { get; set; }

[Column(TypeName = "ntext")]
public string Owner { get; set; }
modelBuilder.Entity<Lodging>().Property(p => p.Owner).HasColumnType("ntext");

[Table("MyLodging")]
modelBuilder.Entity<Lodging>().ToTable("MyLodging");

[Column("MyName")]
modelBuilder.Entity<Lodging>().Property(p => p.Name).HasColumnName("MyName");

//自增长
[Key, DatabaseGenerated(DatabaseGeneratedOption.Identity)]
public Guid SocialId { get; set; }
modelBuilder.Entity<Person>().Property(p => p.SocialId).HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);


[NotMapped]
public string FamilyName {
    get{
	return this.Name.Substring(0, 1);
    }
    set {
	this.Name = value.Substring(0,1) + this.Name.substring(1);
    }
}
=>在数据库中不创建FamilyName字段


//计算属性
[NotMapped]
public string Name
{
	get 
	{
		return FirstName + " " + LastName;
	}
}
modelBuilder.Entity<Person>().Ignore(p => p.Name);

//非映射表
[NotMapped]
public class Person {}
modelBuilder.Ignore<Person>();

//时间戳
[Timestamp]
public Byte[] TimeStamp { get; set; }
modelBuilder.Entity<Loding>().Property(p => p.TimeStamp).IsRowVersion();

//复杂类型
//Address属性映射到数据库中两列: Address_Country, Address_City
[ComplexType]
public class Address
{
	public string Country { get; set; }
	public string City { get; set; }
}
modelBuilder.ComplexType<Address>();

[InverseProperty("PrimaryContactFor")] 
```


#### Fluent API
```
public class BreakAwayContext : DbContext
{
	public DbSet<Destination> Destinations { get; set; }
	public DbSet<Lodging> Lodgings { get; set; }

	protected override void OnModelCreating(DbModelBuilder modelBuilder)
	{
		//Fluent API

		//Destinatin主键
		modelBuilder.Entity<Destination>().HasKey(d => d.DestinationId);

		//Destinatin 1:n Loading, ForeignKey: DestinatinId  
		modelBuilder.Entity<Lodging>().HasRequired(p => p.Destination).WithMany(p=>p.Lodings).HasForeignKey(p => p.DestinationId);

		//长度
		modelBuilder.Entity<Destination>().Property(p => p.Name).HasMaxLength(30);
		modelBuilder.Entity<Destination>().Property(p => p.Country).HasMaxLength(30);

		//非空
		modelBuilder.Entity<Destination>().Property(p => p.Country).IsRequired()

		base.OnModelCreating(modelBuilder);
	}
} 
```


## Migrations
```
Application_Start() {
    System.Data.Entity.Database.SetInitializer <SpringContext>(new DropCreateDatabaseIfModelChanges<SpringContext>());
    =>设定ef策略，model更改后将数据库删除

    System.Data.Entity.Database.SetInitializer<SpringContext>(new MigrateDatabaseToLatestVersion<SpringContext, Configuration>());
    =>设定ef策略，根据Configuration Migrate database
}

```

PM>Enable-Migrations -ContextTypeName MvcGuestbook.Models.MvcGuestbookContext
=>启用Code First Migration

PM>Add-Migration AddMemberCreatedOn
=>
```
public partial class AddMemberCreatedOn : DbMigration
{
    public override void Up()
    {
	AddColumn("dbo.Members", "CreatedOn", c => c.DateTime(nullable:false);
	Sql("ALTER TABLE [dbo].[Members] ADD [CreatedOn] [datetime] NOT NULL DEFAULT getdate()");
    }

    public override void Down()
    {
	DropColumn("dbo.Members", "CreatedOn");
    }
}
```


PM>Update-Database
=>执行




## DbContext
```
db.People.Add(new People(){ FirstName = ""; LastName = "";})
db.People.FirstOrDefault()
db.SaveChanges();
```

```
[DisplayName("电子邮件地址")]
public string Email {get;set;}

@Html.DisplayNameFor(model => model.Email)


@using (Html.BeginForm()) {
	@Html.ValidationSumary(true)
	@Html.LabelFor(model => model.name)
	@Html.EditorFor(model => model.name)
	@Html.ValidationMessageFor(model => model.name)
}
```


## Controller
如果找不到Controller的Action,则执行System.Web.Mvc.Controller.HandleUnknownAction,
默认响应HTTP 404
可替换

public class HomeController : Controller 
{
    protected override void HandleUnknownAction(string actionName)
    {
	Response.Redirect("http://www.baidu.com");
    }
}



//http://localhost/Home/Default
[ActionName("Default")]
public ActionResult Index()
{
    return View();
    =>寻找/Views/Home/Default.cshtml
}


return File(Server.MapPath("~/Images/orderedList0.png"), "image/png");
=>返回项目目录中的图片

byte[] fileContent = GetFileByteArrayFromDB();
return File(fileContent, "application/pdf", "Report.pdf");
=>返回pdf文件供下载

return File(fileContent, "text/plain", Server.UrlPathEncode("中文.txt"));
=>中文文件名



public ActionResult TestForm(ViewModel vm){
{
    if(!ModelState.IsValid)
    {
	return View();
    }
    if(ModelState["Email"].Errors.Count > 0)
    {
	ModelError error = ModelState["Email"].Errors[0];
	var message = error.ErrorMessaage;
	var exp = error.Exception;
    }

    return Redirect("/");
}


public ActionResult UpdateProfile([Bind(Exclude = "LastLoginTime")] Member member)
{
	//=>白名单 Include:只有
	//=>黑名单 Exclude:除此之外
}






# Action Filter

public class ShoppingCartInfoAttribute : ActionFilterAttribute
{
    public override void OnActionExecuting(ActionExecutingContext filterContext)
    {
	filterContext.Controller.ViewData["Cart"] = Utils.GetShoppingCartInfo();
    }
}

[ShoppingCartInfoAttribute]
public AcionResult Index()





# Razor 
@DateTime.Now
@(User.Identity.Name + Model.MemberLevel)
@(ViewBag.IsEnabled ? "启用" : "停用")
@if (ViewBag.IsEnabled) {
    @:启用
} else {
    @:停用
}

@{
    @*服务端多行注释，不输出
      多行代码
    *@

    var name = "Will";
    var message = "hello" + name;
}




_Layout.cshtml
@RenderPage("~/Views/Shared/_Header.cshtml")
@Html.Partial("_Header");
@RenderBody()
@RenderSection("footer", false);
@section footer {

}


App_Code/UIHelper.cshtml(MVC4 布局页)
@helper ShowUnitPrice(int price) 
{
    if(price == 0) {
	@:free
    } else {
	@price
    }
}

@functions 
{
    public static IHtmlStrin GetYesterday() {
	var theDay = DateTime.Now.AddDays(-1);
	return new HtmlString(theDay.ToShortDateString());
    }
}

@UIHelper.ShowUnitPrice(Model.price)






@Html.BeginForm()	=> <form>
@Html.EndForm()		=> </form>
@Html.Label()		=> <lable>
@Html.TextBox()		=> <input type="text">
@Html.TextArea()	=> <textarea>
@Html.Password()	=> <input type="password">
@Html.Checkbox()	=> <input type="checkbox">
@Html.RadioButton()	=> <input type="radio">
@Html.DropDownList()	=> <select>
@Html.ListBox()		=> <select multiple>
@Html.Hidden()		=> <input type="hidden">
@Html.ValidationSummary()=> 
@Html.Id()		=> 特定Item的id
@Html.Name()		=> 特定Item的name
@Html.Value()		=> 特定Item的value






IDictionary<string, object> attr = new Dictionary<string, object>();
attr.Add("size", "32");
attr.Add("style", "color:red;");

@Html.TextBox("name", "Value", attr);
=><input id="name" name="name" size="32", style="color:red;" type="text" value="Value" />




public static class ImageHelpers
{
    public static MvcHtmlString Img(this HtmlHelper helper, string url, string alternateText, string title)
    {
	return MvcHtmlString.Create(String.Format("<img src='{0}' alt='{1}' title='{2}' />", url, alternateText, title));
    }
}

@using namespace
@Html.Img("url", "alt", "title")



## TagBuilder
public static class ImageHelpers
{
    public static MvcHtmlString ImageLink(this HtmlHelper helper, string actionName, string imageUrl, string alternateText, object routeValues, object linkHtmlAttributes, object imageHtmlAttributes) 
    {
	var urlHelper = new UrlHelper(helper.ViewContext.RequestContext);
	var url = urlHelper.Action(actionName, routeValues);
	
	//build link
	var linkTagBuilder = new TagBuilder("a");
	linkTagBuilder.MergeAttribute("href", url);
	linkTagBuilder.MergeAttributes(new RouteValueDictionary(linkHtmlAttributes));

	//build image
	var imageTagBuilder = new TagBuilder("img");
	imageTagBuilder.mergeAttribute("alt", alternateText);
	imageTagBuilder.mergeAttribute("title", alternateText);
	imageTagBuilder.mergeAttribute(new RouteValueDictionary(imageHtmlAttributes));

	//image into link
	linkTagBuilder.innerHtml = imageTagBuilder.ToString(TagRenderMode.SelfClosing);
	
	return MvcHtmlString.Create(linkTagBuilder.ToString());
    }
}


# TagBuilder
AddCssClass()
GenerateId()
MergeAttribute()
SetInnerText()
ToString()

