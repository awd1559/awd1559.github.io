---
layout:     post
title:      "java web"
subtitle:   " \"java\""
date:       2014-06-09 12:00:00
author:     "awd"
header-img: "img/post-bg-2015.jpg"
category: web
permalink: /web/java
tags:
    - web
---
> - [web目录](/web/)


- config spring project in eclipse
- install gradle
- install eclipse gradle plugin


- Maven => pom.xml
- Gradle => build.gradle


# spring boot
> - 2014: v1.0.0


#### starters

| -------------------------------------- | ------------------ |
|spring-boot-starter                     |core, log, YAML
|spring-boot-starter-actuator            |监控和管理应用
|spring-boot-starter-amqp                |spring-rabbit,高级消息队列
|spring-boot-starter-aop                 |spring-aop, AspectJ
|spring-boot-starter-batch               |HSQLDB
|spring-boot-starter-cloud-connectors    |Cloud Fundary, Heroku
|spring-boot-starter-data-elasticsearch  |spring-data-elesticsearch
|spring-boot-starter-data-gemfire        |spring-data-gemfire
|spring-boot-starter-data-jpa            |spring-data-jpa, spring-orm, Hibernate
|spring-boot-starter-data-mongodb        |
|spring-boot-starter-data-rest           |
|spring-boot-starter-data-solr           |
|spring-boot-starter-freemarker          |
|spring-boot-starter-groovy-templates    |
|spring-boot-starter-hateoas             |
|spring-boot-starter-hornetq             |
|spring-boot-starter-integration         |
|spring-boot-starter-jdbc                |连接数据库、操作数据库，管理数据库连接
|spring-boot-starter-jersey              |Jersey RESTFul web
|spring-boot-starter-jta-atomikos        |分布式事务
|spring-boot-starter-jta-bitronix        |分布式事务
|spring-boot-starter-mail                |
|spring-boot-starter-mobile              |
|spring-boot-starter-mustache            |
|spring-boot-starter-redis               |
|spring-boot-starter-security            |
|spring-boot-starter-social-facebook     |
|spring-boot-starter-social-linkedin     |
|spring-boot-starter-social-twitter      |
|spring-boot-starter-test                |
|spring-boot-starter-thymeleaf           |template
|spring-boot-starter-velocity            |template
|spring-boot-starter-web                 |tomcat, spring-webmvc
|spring-boot-starter-websocket           |
|spring-boot-starter-ws                  |web service
|spring-boot-starter-actuator            |指标和监控
|spring-boot-starter-remote-shell        |远程ssh shell






#### Basic

```
@SpringBootApplication
@Controller
public class Demo1Application {

  public static void main(String[] args) {
    SpringApplication.run(Demo1Application.class, args);
  }
  
  @RequestMapping("/home")
  public @ResponseBody
  String homePage() {
    return "this is home dsdgdssdfgdgsdfg";
  }
}
```



> - CommandLine Runner

```
@Order(2)
public class StartupRunner implements CommandLineRunner {
    protected final org.apache.commons.logging.Logger logger = LoggerFactory.getLogger(StartupRunner.class);

    @Override
    public void run(String... strings) throws Exception {
        logger.info("hello");
    }

    @Scheduled(initialDelay = 1000, fixedRate = 10000)
    public void run() {
        logger.info("");
    }
}

@SpringBootApplication
@EnableScheduling
public class DemoApplication {

  public static void main(String[] args) {
    SpringApplication.run(DemoApplication.class, args);
  }

  @Bean
  public StartupRunner schedulerRunner() {
    return new StartupRunner();
  }
}
```




#### database
application.properties
```
spring.datasource.url = jdbc:h2:~/test;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSE
spring.datasource.username = sa
spring.datasource.password =
```
~/test.mv.db


```
spring.datasource.driver-class-name=com.mysql.jdbc.Driver
spring.datasource.url=jdbc:mysql://localhost:3306/springbootcookbook
spring.datasource.username=root
spring.datasource.password=

spring.jpa.hibernate.ddl-auto=create-drop|update   #自动创建表和数据库
spring.jpa.show-sql = true              #显示sql
spring.jpa.database = MYSQL
```







#### run


```
//in eclipse
Eclipse Market -> STS
new -> project -> spring starter project

RunAs -> Spring Boot App


SpringBoot In IDEA


mvn package #create jar
mvn spring-boot:run #listen on 8080


gradle build #create jar
gradle bootRun #listen on 8080
```


















# spring
> - 已经不需要xml配置了





```
@Configuration
@ComponentScan("com.bread")
public class MyConfig {
  @Bean
  public Person tom() {
    return new Person();
  }
  
  @Bean
  public Teacher jack() {
    return new Teacher();
  }
}


@Component
@Transactional
public class Person {
  private String name;
  private int age;
  
  Person() {
    this.name = "person1";
    this.age = 10;
  }
  public String getName() {
    return this.name;
  }
  public int getAge() {
    return this.age;
  }
}

@Component
public class Teacher {
  @Autowired
  private Person tom;
  
  public Teacher() {
  }
  
  @Override
  public String toString() {
    if(tom != null)
      return "[" + tom.getName() + ": " + tom.getAge() + "]";
    else
      return "tom is not wired";
  }
}


ApplicationContext context = new AnnotationConfigApplicationContext("com.bread");
Teacher teacher = (Teacher) context.getBean("jack");  
```







#### Spring template engines

> - [thymeleaf](http://www.thymeleaf.org/)
> - [freemaker](http://freemarker.org/docs/index.html)
> - [mustache](http://mustache.github.io/)
> - [velocity](http://velocity.apache.org/engine/devel/user-guide.html)
> - [groovy templates](http://docs.groovy-lang.org/latest/html/documentation/template-engines.html)



#### 文件系统

- applicationContext.xml
  
- dispatcher-servlet.xml

```
  //url mapping to Controller
  //controsller use view 

  <!--定义映射-->
  <bean id="urlMapping">
    <property name="mapping">
      <props> 
        <prop key="helloWorld.do">helloWorldController</prop> 
      </props> 
    </property>
  </bean>

  <!--定义视图--> 
  <bean id="viewResolver" >
    <property name="viewClass"> 
      <value>org.springframework.web.servlet.view.InternalResourceView</value> 
    </property>
  </bean>

  <!--定义控制器--> 
  <bean id="helloWorldController" class="com.myHelloWorld.action.HelloWorldController"> 
    <property name="helloWorld"> 
      <value>HelloWorld</value> 
    </property> 
    <property name="viewPage"> 
      <value>/jsp/helloWorld.jsp</value> 
    </property> 
  </bean> 
```



- web.xml


```
<servlet-mapping>
    <servlet-name>dispatcher</servlet-name>
    <url-pattern>*.htm</url-pattern>
</servlet-mapping>
```

htm后缀的url映射到dispatcher



#### sql server

download jar file from [microsoft](http://www.microsoft.com/en-us/download/details.aspx?displaylang=en&id=11774)

```
mvn install:install-file -Dfile=sqljdbc41.jar -Dpackaging=jar -DgroupId=com.microsoft.sqlserver -DartifactId=sqljdbc41 -Dversion=4.1
```

```
<dependency>
	<groupId>com.microsoft.sqlserver</groupId>
	<artifactId>sqljdbc41</artifactId>
	<version>4.1</version>
</dependency>
```

```
spring.datasource.url=jdbc:sqlserver://localhost:1433;databaseName=spring;integratedSecurity=false
spring.datasource.username=sa
spring.datasource.password=123456789
spring.datasource.driverClassName=com.microsoft.sqlserver.jdbc.SQLServerDriver
```



#### velocity

```
<dependency>
	<groupId>org.springframework.boot</groupId>
	<artifactId>spring-boot-starter-velocity</artifactId>
</dependency>
```


- resources/application.properties

```
server.port=8080
logging.level.org.apache.velocity=DEBUG

spring.velocity.cache=false
spring.velocity.properties.velocimacro.library=global.vm
spring.velocity.toolbox-config-location=toolbox.xml
spring.velocity.properties.input.encoding=UTF-8
spring.velocity.properties.output.encoding=UTF-8
```


- resources/toolbox.xml

- import MathTool

```
<?xml version="1.0"?>
<toolbox>
	<tool>
  		<key>math</key>
  		<scope>application</scope>
  		<class>org.apache.velocity.tools.generic.MathTool</class>
	</tool>
</toolbox>
```


- resources/templates/global.vm
- define macro

```
#macro(sayHello $youName)
	Hello <strong> $youName</strong>
#end
```


```
@Controller
public class MainController {
	@RequestMapping("/index")
	public String index(Map<String,Object> map){
		map.put("name", "value");

		return "index";
	}
}
```


- resources/templates/index.vm






# ComandLine

#### springboot cli

```
spring init     //using spring.io => demo.zip
spring run .    //run springboot 
spring jar app.jar .
spring war app.war .
```


# IDE

#### springboot in IDE

> - IDEA 
> - new maven project -> config spring boot, not tomcat
> - new spring initlizer -> 

> - Eclipse
> - help->eclipse market->spring ide


#### spring in IDE

> - sprint tool suit->maven
> - eclipse -> maven
> - idea -> maven


```
//pom.xml
<parent>
  <groupId>org.springframework.boot</groupId>
  <artifactId>spring-boot-starter-parent</artifactId>
  <version>1.4.4.RELEASE</version>
</parent>
<dependency>
  <groupId>org.springframework.boot</groupId>
  <artifactId>spring-boot-starter-web</artifactId>
</dependency>

<dependency> 
  <groupId>com.vaadin</groupId> 
  <artifactId>vaadin-spring-boot-starter</artifactId> 
  <version>1.1.1</version> 
</dependency>
```

```
@ComponentScan
@EnableAutoConfiguration
public class Application {
    public static void main(String[] args) {
        SpringApplication.run(Application.class, args);
    }
}

@Controller
public class ShowPersonController {
    @RequestMapping("/showPerson")
    public @ResponseBody Person showPerson() {
        return new Person("levinzhang","levinzhang1981@gmail.com");
    }
}
```



#### java web in Eclipse

```
File -> New -> Project -> dynamic java web
create server
```

